# KAES4 go

import os
import secrets
import hashlib
import ctypes

class toolbox:

    # module init
    def __init__(self):
        global mydll
        temp = self.dohash('./kaes4na.dll')
        keys = [3482392,
                b'\xceJ\xc7WE\xfb\x84\x14\x15\x03\x00V\\\xfa\xb0\xb0\xef\x0f\xa3\xbf\x12(\\\x01xA\x10\x93_\xa7\x0f\x91',
                b'u\xfd(\x072\xd9\xbcW3\xfc\xc3\x86Q\xdc*\xcc]@xu\xfcdrv6\xf7r\xd9\xc2m3\x84']
    
        if temp == keys:
            # Go DLL 로드
            self.mydll = ctypes.CDLL('./kaes4na.dll')

            # Go 함수 시그니처 정의
            self.mydll.func0.argtypes = (ctypes.POINTER(ctypes.c_char),)
            self.mydll.func1.argtypes = (ctypes.POINTER(ctypes.c_char), ctypes.c_int) * 2 + (ctypes.c_int,) * 4
            self.mydll.func1.restype = ctypes.POINTER(ctypes.c_char)
            self.mydll.func2.argtypes = (ctypes.POINTER(ctypes.c_char),) * 3 + (ctypes.c_int,) * 2
            self.mydll.func2.restype = ctypes.POINTER(ctypes.c_char)
            self.mydll.func3.argtypes = (ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_int)
            self.mydll.func3.restype = ctypes.POINTER(ctypes.c_char)
            self.mydll.func4.argtypes = (ctypes.POINTER(ctypes.c_char), ctypes.POINTER(ctypes.c_char), ctypes.c_int)
            self.mydll.func4.restype = ctypes.POINTER(ctypes.c_char)
            self.mydll.func5.argtypes = (ctypes.POINTER(ctypes.c_char), ctypes.c_int) + (ctypes.POINTER(ctypes.c_char),) + (ctypes.POINTER(ctypes.c_char), ctypes.c_int) * 2
            self.mydll.func5.restype = ctypes.POINTER(ctypes.c_char)
            self.mydll.func6.argtypes = (ctypes.c_int, ctypes.POINTER(ctypes.c_char)) + (ctypes.POINTER(ctypes.c_char), ctypes.c_int) * 2
            self.mydll.func6.restype = ctypes.POINTER(ctypes.c_char)

            self.valid = True # module validity
        else:
            self.mydll = 0
            self.valid = False # module validity
        self.assist = True # native assist check

    # 위변조 확인
    def dohash(self, name):
        with open(name, 'rb') as f:
            dllbyte = f.read()
            rev = bytes( reversed(dllbyte) )

        keys = [ ]
        keys.append( len(dllbyte) )
        keys.append( hashlib.sha3_256(dllbyte).digest() )
        keys.append( hashlib.sha3_256(rev).digest() )

        return keys

    # little endian encoding
    def encode(self, number, length): # int, int
        out = [ ]
        for i in range(0, length):
            out.append(number % 256)
            number = number // 256
        return bytes(out) # bytes

    # little endian decoding
    def decode(self, binary): # bytes
        value = 0
        for i in range( 0, len(binary) ):
            if binary[i] != 0:
                value = value + binary[i] * (256 ** i)
        return value # int

    # reading KAES4 header
    def rdhead(self, header): # str
        temp = header.split('\n')
        out = dict()
        for i in temp:
            try:
                a = i[0 : i.find('(')]
                b = i[i.find('(') + 1 : i.find(')')]
                c = i[i.find(')') + 1 : ]
                if b == 'STR':
                    out[a] = str(bytes.fromhex(c), 'utf-8')
                elif b == 'BYTES':
                    out[a] = bytes.fromhex(c)
                elif b == 'INT':
                    out[a] = int(c)
                elif b == 'FLOAT':
                    out[a] = float(c)
            except:
                pass
        return out # dict

    # making KAES4 header
    def mkhead(self, values): # dict
        out = [ ]
        for i in values:
            temp = f'{i}'
            if type( values[i] ) == str:
                temp = temp + f"(str){bytes.hex( bytes(values[i], 'utf-8') )}\n"
            elif type( values[i] ) == bytes:
                temp = temp + f"(bytes){bytes.hex( values[i] )}\n"
            elif type( values[i] ) == int:
                temp = temp + f'(int){str( values[i] )}\n'
            elif type( values[i] ) == float:
                temp = temp + f'(float){str( values[i] )}\n'
            out.append(temp)
        return ''.join(out).upper()

    # short encryption no padding 16nB <native assist>
    def enshort(self, key, iv, data): # bytes, bytes, bytes
        # C 스타일의 정수 배열로 변환
        arg0 = ctypes.c_char_p(key)
        arg1 = ctypes.c_char_p(iv)
        arg2 = ctypes.c_char_p(data)
        arg3 = len(data)

        # Go 함수 호출
        ptr = self.mydll.func2(arg0, arg1, arg2, arg3, 0)

        # 출력 문자열 바이트 생성
        temp = [0] * 256
        for i in range(0, 8):
            temp[i] = ptr[i][0]
        temp = self.decode( bytes(temp) )
        out = [0] * temp
        for i in range(8, temp + 8):
            out[i - 8] = ptr[i][0]
        out = bytes(out)

        # 출력 배열 메모리 해제
        self.mydll.func0(ptr)

        return out

    # short decryption no padding 16nB <native assist>
    def deshort(self, key, iv, data): # bytes, bytes, bytes
        # C 스타일의 정수 배열로 변환
        arg0 = ctypes.c_char_p(key)
        arg1 = ctypes.c_char_p(iv)
        arg2 = ctypes.c_char_p(data)
        arg3 = len(data)

        # Go 함수 호출
        ptr = self.mydll.func2(arg0, arg1, arg2, arg3, 1)

        # 출력 문자열 바이트 생성
        temp = [0] * 256
        for i in range(0, 8):
            temp[i] = ptr[i][0]
        temp = self.decode( bytes(temp) )
        out = [0] * temp
        for i in range(8, temp + 8):
            out[i - 8] = ptr[i][0]
        out = bytes(out)

        # 출력 배열 메모리 해제
        self.mydll.func0(ptr)

        return out

    # generate secure random nB <native assist>
    def genrandom(self, size): # int
        return secrets.token_bytes(size) # bytes

    # generate mkey 48B <native assist>
    def mkkey(self, salt, pw, kf): # bytes, bytes, bytes
        # C 스타일의 정수 배열로 변환
        pw = kf + pw + pw + kf + pw
        arg0 = ctypes.c_char_p(pw)
        arg1 = len(pw)
        arg2 = ctypes.c_char_p(salt)
        arg3 = len(salt)

        # Go 함수 호출
        ptr = self.mydll.func1(arg0, arg1, arg2, arg3, 16384, 8, 1, 48)

        # 출력 문자열 바이트 생성
        out = [0] * 48
        for i in range(0, 48):
            out[i] = ptr[i][0]
        out = bytes(out)

        # 출력 배열 메모리 해제
        self.mydll.func0(ptr)
        
        return out # bytes 48B

    # generate key storage 256B <native assist>
    def svkey(self, salt, pw, kf): # bytes, bytes, bytes
        # C 스타일의 정수 배열로 변환
        pw = pw + pw + kf + kf + pw
        arg0 = ctypes.c_char_p(pw)
        arg1 = len(pw)
        arg2 = ctypes.c_char_p(salt)
        arg3 = len(salt)

        # Go 함수 호출
        ptr = self.mydll.func1(arg0, arg1, arg2, arg3, 524288, 8, 1, 256)

        # 출력 문자열 바이트 생성
        out = [0] * 256
        for i in range(0, 256):
            out[i] = ptr[i][0]
        out = bytes(out)

        # 출력 배열 메모리 해제
        self.mydll.func0(ptr)
        
        return out # bytes 48B

    # KAES4 whole data hint view
    def view(self, data): # path str / bytes
        if type(data) == bytes:
            try:
                size = len(data)
                temp = 0
                chunk = data[temp : temp + 8]
                temp = 8
                while chunk[0:5] != b'KAES4':
                    temp = temp + 120
                    if temp >= size:
                        raise Exception('notvalidKAES4') # err
                    else:
                        chunk = data[temp : temp + 8]
                        temp = temp + 8
                header = str(data[ temp : temp + self.decode( chunk[5:8] ) ], 'utf-8')
                header = self.rdhead(header)
                if header['MODE'] == 'WHOLE':
                    return header['HINT'] # bytes
                else:
                    raise Exception('notvalidKAES4') # err
            except:
                raise Exception('notvalidKAES4') # err
            
        elif type(data) == str:
            try:
                with open(data, 'rb') as f:
                    size = os.path.getsize(data)
                    chunk = f.read(8)
                    temp = 8
                    while chunk[0:5] != b'KAES4':
                        temp = temp + 128
                        if temp >= size:
                            raise Exception('notvalidKAES4') # err
                        else:
                            f.read(120)
                            chunk = f.read(8)
                    header = str(f.read( self.decode( chunk[5:8] ) ), 'utf-8')
                    header = self.rdhead(header)
                if header['MODE'] == 'WHOLE':
                    return header['HINT'] # bytes
                else:
                    raise Exception('notvalidKAES4') # err
            except:
                raise Exception('notvalidKAES4') # err
            
        else:
            raise Exception('wrongdata') # err

    # whole encryption <native assist>
    def enwhole(self, pw, kf, hint, data): # bytes, bytes, bytes, path str / bytes
        if type(data) == bytes:
            salt = self.genrandom(32) # salt 32B
            pwh = self.svkey(salt, pw, kf) # pwhash 256B
            mkey = self.mkkey(salt, pw, kf) # master key 48B
            ckey = self.genrandom(1536) # content key 1536B
            ckeydt = self.enshort(mkey[0:32], mkey[32:48], ckey) # content key data 1536B
            pw = b'0' * 64
            kf = b'0' * 64
            mkey = b'0' * 64
            
            header = {'mode' : 'WHOLE', 'salt' : salt, 'pwh' : pwh, 'ckdt' : ckeydt, 'hint' : hint}
            header = bytes(self.mkhead(header), 'utf-8')
            header = genbpng() + b'KAES4' + self.encode(len(header), 3) + header # final header B
        
            # C 스타일의 정수 배열로 변환
            arg0 = ctypes.c_char_p(ckey)
            arg1 = ctypes.c_char_p(data)
            arg2 = len(data)

            # Go 함수 호출
            ptr = self.mydll.func3(arg0, arg1, arg2)

            # 출력 문자열 바이트 생성
            temp = [0] * 256
            for i in range(0, 8):
                temp[i] = ptr[i][0]
            temp = self.decode( bytes(temp) )
            out = [0] * temp
            for i in range(8, temp + 8):
                out[i - 8] = ptr[i][0]
            out = bytes(out)

            # 출력 배열 메모리 해제
            self.mydll.func0(ptr)

            return header + out # bytes

        elif type(data) == str:
            path = os.path.abspath(data).replace('\\', '/') # abs path
            fopath = path[ 0 : path.rfind('/') + 1 ] # folder path
            name = path[path.rfind('/') + 1:] # true name
            tgt = fopath + bytes.hex( self.genrandom(3) ) + '.png' # write path
            
            tkey = self.genrandom(48) # title key 48B
            name = bytes(name, 'utf-8')
            name = name + bytes(chr(16 - len(name) % 16), 'utf-8') * (16 - len(name) % 16)
            nmdt = self.enshort( tkey[0:32], tkey[32:48], name ) # name data
            
            salt = self.genrandom(32) # salt 32B
            pwh = self.svkey(salt, pw, kf) # pwhash 256B
            mkey = self.mkkey(salt, pw, kf) # master key 48B
            ckey = self.genrandom(1536) # content key 1536B
            ckeydt = self.enshort(mkey[0:32], mkey[32:48], ckey) # content key data 1536B
            tkeydt = self.enshort(mkey[0:32], mkey[32:48], tkey) # title key data 48B
            pw = b'0' * 64
            kf = b'0' * 64
            mkey = b'0' * 64
            
            header = {'mode' : 'WHOLE', 'salt' : salt, 'pwh' : pwh, 'ckdt' : ckeydt, 'hint' : hint, 'tkdt' : tkeydt, 'nmdt' : nmdt}
            header = bytes(self.mkhead(header), 'utf-8')
            header = genbpng() + b'KAES4' + self.encode(len(header), 3) + header # final header B

            # C 스타일의 정수 배열로 변환
            arg0 = ctypes.c_char_p(header)
            arg1 = len(header)
            arg2 = ctypes.c_char_p(ckey)
            arg3 = ctypes.c_char_p( bytes(path, 'utf-8') )
            arg4 = len( bytes(path, 'utf-8') )
            arg5 = ctypes.c_char_p( bytes(tgt, 'utf-8') )
            arg6 = len( bytes(tgt, 'utf-8') )

            # Go 함수 호출
            self.mydll.func5(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
                    
            return tgt # new file full path str

        else:
            raise Exception('wrongdata') # err

    # whole decryption <native assist>
    def dewhole(self, pw, kf, data): # bytes, bytes, bytes, path str / bytes
        if type(data) == bytes:
            try:
                size = len(data)
                stpoint = 0
                chunk = data[stpoint : stpoint + 8]
                stpoint = 8
                while chunk[0:5] != b'KAES4':
                    stpoint = stpoint + 120
                    if stpoint >= size:
                        raise Exception('notvalidKAES4') # err
                    else:
                        chunk = data[stpoint : stpoint + 8]
                        stpoint = stpoint + 8
                header = str(data[ stpoint : stpoint + self.decode( chunk[5:8] ) ], 'utf-8')
                stpoint = stpoint + len(header)
                header = self.rdhead(header)
                if header['MODE'] == 'WHOLE':
                    salt = header['SALT'] # salt 32B
                    pwh = header['PWH'] # pwhash 256B
                    ckeydt = header['CKDT'] # ckey data 1536B
                else:
                    raise Exception('notvalidKAES4') # err
            except:
                raise Exception('notvalidKAES4') # err

            if self.svkey(salt, pw, kf) == pwh:
                data = data[stpoint:]
                mkey = self.mkkey(salt, pw, kf) # master key 48B
                ckey = self.deshort(mkey[0:32], mkey[32:48], ckeydt) # content key 1536B
                pw = b'0' * 64
                kf = b'0' * 64
                mkey = b'0' * 64

                # C 스타일의 정수 배열로 변환
                arg0 = ctypes.c_char_p(ckey)
                arg1 = ctypes.c_char_p(data)
                arg2 = len(data)

                # Go 함수 호출
                ptr = self.mydll.func4(arg0, arg1, arg2)

                # 출력 문자열 바이트 생성
                temp = [0] * 256
                for i in range(0, 8):
                    temp[i] = ptr[i][0]
                temp = self.decode( bytes(temp) )
                out = [0] * temp
                for i in range(8, temp + 8):
                    out[i - 8] = ptr[i][0]
                out = bytes(out)

                # 출력 배열 메모리 해제
                self.mydll.func0(ptr)

                return out # bytes
            
            else:
                raise Exception('invalidKEY') # err

        elif type(data) == str:
            path = os.path.abspath(data).replace('\\', '/')
            fopath = path[ 0 : path.rfind('/') + 1 ] # folder path
            size = os.path.getsize(path)
            stpoint = 0 # 읽기 시작점
            try:
                with open(path, 'rb') as f:
                    chunk = f.read(8)
                    stpoint = 8
                    while chunk[0:5] != b'KAES4':
                        stpoint = stpoint + 128
                        if stpoint >= size:
                            raise Exception('notvalidKAES4') # err
                        else:
                            f.read(120)
                            chunk = f.read(8)
                    header = str(f.read( self.decode( chunk[5:8] ) ), 'utf-8')
                    stpoint = stpoint + len(header)
                    header = self.rdhead(header)
                    if header['MODE'] == 'WHOLE':
                        salt = header['SALT'] # salt 32B
                        pwh = header['PWH'] # pwhash 256B
                        ckeydt = header['CKDT'] # ckey data 1536B
                        tkeydt = header['TKDT'] # title key data 48B
                        namedt = header['NMDT'] # name data
                    else:
                        raise Exception('notvalidKAES4') # err
            except:
                raise Exception('notvalidKAES4') # err

            if self.svkey(salt, pw, kf) == pwh:
                mkey = self.mkkey(salt, pw, kf)
                ckey = self.deshort(mkey[0:32], mkey[32:48], ckeydt)
                tkey = self.deshort(mkey[0:32], mkey[32:48], tkeydt)
                pw = b'0' * 64
                kf = b'0' * 64
                mkey = b'0' * 64
                
                name = self.deshort(tkey[0:32], tkey[32:48], namedt)
                name = name[:-name[-1]]
                tgt = fopath + str(name, 'utf-8') # true path

                # C 스타일의 정수 배열로 변환
                arg0 = stpoint
                arg1 = ctypes.c_char_p(ckey)
                arg2 = ctypes.c_char_p( bytes(path, 'utf-8') )
                arg3 = len( bytes(path, 'utf-8') )
                arg4 = ctypes.c_char_p( bytes(tgt, 'utf-8') )
                arg5 = len( bytes(tgt, 'utf-8') )

                # Go 함수 호출
                self.mydll.func6(arg0, arg1, arg2, arg3, arg4, arg5)

                return tgt # new file full path str

            else:
                raise Exception('invalidKEY') # err

        else:
            raise Exception('wrongdata') # err

    # func encryption <native assist>
    def enfunc(self, mkey, data, tgt = 'temp466'): # bytes 48B, path str / bytes, (new path str)
        if type(data) == bytes:
            ckey = self.genrandom(1536) # content key 1536B
            ckeydt = self.enshort(mkey[0:32], mkey[32:48], ckey) # content key data 1536B
            mkey = b'0' * 64
            
            header = {'mode' : 'FUNC', 'ckdt' : ckeydt}
            header = bytes(self.mkhead(header), 'utf-8')
            header = b'KAES4' + self.encode(len(header), 3) + header # final header B
        
            # C 스타일의 정수 배열로 변환
            arg0 = ctypes.c_char_p(ckey)
            arg1 = ctypes.c_char_p(data)
            arg2 = len(data)

            # Go 함수 호출
            ptr = self.mydll.func3(arg0, arg1, arg2)

            # 출력 문자열 바이트 생성
            temp = [0] * 256
            for i in range(0, 8):
                temp[i] = ptr[i][0]
            temp = self.decode( bytes(temp) )
            out = [0] * temp
            for i in range(8, temp + 8):
                out[i - 8] = ptr[i][0]
            out = bytes(out)

            # 출력 배열 메모리 해제
            self.mydll.func0(ptr)

            return header + out # bytes

        elif type(data) == str:
            ckey = self.genrandom(1536) # content key 1536B
            ckeydt = self.enshort(mkey[0:32], mkey[32:48], ckey) # content key data 1536B
            mkey = b'0' * 64
            
            header = {'mode' : 'FUNC', 'ckdt' : ckeydt}
            header = bytes(self.mkhead(header), 'utf-8')
            header = b'KAES4' + self.encode(len(header), 3) + header # final header B
            path = os.path.abspath(data)

            # C 스타일의 정수 배열로 변환
            arg0 = ctypes.c_char_p(header)
            arg1 = len(header)
            arg2 = ctypes.c_char_p(ckey)
            arg3 = ctypes.c_char_p( bytes(path, 'utf-8') )
            arg4 = len( bytes(path, 'utf-8') )
            arg5 = ctypes.c_char_p( bytes(tgt, 'utf-8') )
            arg6 = len( bytes(tgt, 'utf-8') )

            # Go 함수 호출
            self.mydll.func5(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
                    
            return tgt # new file full path str

        else:
            raise Exception('wrongdata') # err

    # func decryption <native assist>
    def defunc(self, mkey, data, tgt = 'temp466'): # bytes 48B, path str / bytes, (new path str)
        if type(data) == bytes:
            try:
                size = len(data)
                stpoint = 0
                chunk = data[stpoint : stpoint + 8]
                stpoint = 8
                while chunk[0:5] != b'KAES4':
                    stpoint = stpoint + 120
                    if stpoint >= size:
                        raise Exception('notvalidKAES4') # err
                    else:
                        chunk = data[stpoint : stpoint + 8]
                        stpoint = stpoint + 8
                header = str(data[ stpoint : stpoint + self.decode( chunk[5:8] ) ], 'utf-8')
                stpoint = stpoint + len(header)
                header = self.rdhead(header)
                if header['MODE'] == 'FUNC':
                    ckeydt = header['CKDT'] # ckey data 1536B
                else:
                    raise Exception('notvalidKAES4') # err
            except:
                raise Exception('notvalidKAES4') # err

            if True:
                data = data[stpoint:]
                ckey = self.deshort(mkey[0:32], mkey[32:48], ckeydt) # content key 1536B
                mkey = b'0' * 64

                # C 스타일의 정수 배열로 변환
                arg0 = ctypes.c_char_p(ckey)
                arg1 = ctypes.c_char_p(data)
                arg2 = len(data)

                # Go 함수 호출
                ptr = self.mydll.func4(arg0, arg1, arg2)

                # 출력 문자열 바이트 생성
                temp = [0] * 256
                for i in range(0, 8):
                    temp[i] = ptr[i][0]
                temp = self.decode( bytes(temp) )
                out = [0] * temp
                for i in range(8, temp + 8):
                    out[i - 8] = ptr[i][0]
                out = bytes(out)

                # 출력 배열 메모리 해제
                self.mydll.func0(ptr)

                return out # bytes
            
            else:
                raise Exception('invalidKEY') # err

        elif type(data) == str:
            path = os.path.abspath(data)
            size = os.path.getsize(path)
            stpoint = 0 # 읽기 시작점
            try:
                with open(path, 'rb') as f:
                    chunk = f.read(8)
                    stpoint = 8
                    while chunk[0:5] != b'KAES4':
                        stpoint = stpoint + 128
                        if stpoint >= size:
                            raise Exception('notvalidKAES4') # err
                        else:
                            f.read(120)
                            chunk = f.read(8)
                    header = str(f.read( self.decode( chunk[5:8] ) ), 'utf-8')
                    stpoint = stpoint + len(header)
                    header = self.rdhead(header)
                    if header['MODE'] == 'FUNC':
                        ckeydt = header['CKDT'] # ckey data 1536B
                    else:
                        raise Exception('notvalidKAES4') # err
            except:
                raise Exception('notvalidKAES4') # err

            if True:
                ckey = self.deshort(mkey[0:32], mkey[32:48], ckeydt)
                mkey = b'0' * 64

                # C 스타일의 정수 배열로 변환
                arg0 = stpoint
                arg1 = ctypes.c_char_p(ckey)
                arg2 = ctypes.c_char_p( bytes(path, 'utf-8') )
                arg3 = len( bytes(path, 'utf-8') )
                arg4 = ctypes.c_char_p( bytes(tgt, 'utf-8') )
                arg5 = len( bytes(tgt, 'utf-8') )

                # Go 함수 호출
                self.mydll.func6(arg0, arg1, arg2, arg3, arg4, arg5)

                return tgt # new file full path str

            else:
                raise Exception('invalidKEY') # err

        else:
            raise Exception('wrongdata') # err

# get keyfile by path
def getkf(path): # path str
    try:
        with open(path, 'rb') as f:
            kf = f.read()
    except:
        kf = genbkf()
    return kf

# generate basic key file 8192B
def genbkf():
    temp = b''
    temp = temp + b'`}\xb0&B\x08\x0c\x88a^\x1a\xa2\x01qU/\x7fF\xba!\x80J\x85\x0b\xf8\xd9\xdb4@\x08\xad\x0b'
    temp = temp + b'\xf2\xe0\xb7\xeec8\xb1\x1cq\x0c\x92!u\xae\xd5I\xc1\x9cpV\xd5\x98[-*P\x9a>\xb5|\xb1}'
    temp = temp + b'\x95c\xf4i\xa2\x00r4\xc2\xf2j\x9f\x0f\x8d\x9b>r5\xf3\xc8s\xb2 <R\xd4/c\xeb\x89T\x89'
    temp = temp + b'\x0f\xdc\xa3\xc5\xd5\xebG\x86\xf5\rgD\x19\x9a>\xc6G,\x96\x1c\xf5`\xab\x95|pe2_\xa3\xbd\x8c'
    temp = temp + b'\xcd\x0f\xfb\xf6\x0c\x80\xf5AW\x80y\xa0-\x9b4\x12\x11S=|\xa7"1i\x0c4:"\xbar$\xc5'
    temp = temp + b'\xe3x\x07m-V\xc4\n\xf9D\xd0\x00\xfbi)\xd5?z\x94\xcc/d\xfcB\xa1Lo\x0f\x0em\x01p'
    temp = temp + b'N\xab\xc0\x86\xac\x96M\xc9C\x7f|\xfe\xbc\xf3\xeb\r\x9e\xabAm\xe4\xf8\x9f\x16\x04\xd6\xba\xb1\xfa\xa9\x87\x00'
    temp = temp + b" \xca\x0fpH\xd5\xe7\x9fv\xd7-`|\x10b\xadE&\xe1\xf3\x81\x05\x11\xe6\xa3\xac\x16'\xed\xfe\xb3-"
    temp = temp + b'\x85h\x9b\x96\xbc\x06o\xcb\xf7zr\xe1\x8dq\x05:\xf3\xde2\xaa\xf3\x8e\xa3g\xc1"oM\xd6\x1bp\t'
    temp = temp + b'P\x0f\xb3\x8d\x1a@\xfdtPk\x9d\xc3\xe9\xa0\xa0y\x08\x96\xaf\x0es\xc6G\x95KXr=f\xdc\x19`'
    temp = temp + b'\xe0\xd7Q)\xc7\x1a\x86)xh9.\x83\xa6\x08\x92\x9f\xc0\xde~\xcc\xdc\xfcQ4\xc0 \xdb\xae\xc7.\xa3'
    temp = temp + b"{t\xe8\xfa\xc5\x9a'\xd3=x\x00\xd0\x91\xe7\xcc\r\x08\xfa\xbf9;\xe8\xc0\x8b\xf1\x1cS\xc7\x8d\xc0 \xc1"
    temp = temp + b'\x86\x0bN\xcfV\x82\x05\xd8\x98\x87\xd2\x96S\xc4\xce\xb9)\xb5\xa5\xd5\xa0\xf2\xd4\xad\xc5\xa7\x84c{\x92C\xce'
    temp = temp + b'o\xa7\x05\xa5r@\x8b\x99}(i}.\x7f\t\x9f6\x01\xc6/|\xe3\xe2(\xec\x9b~[]\xf7\x96\x9a'
    temp = temp + b'1K\xc2\x0c\xf6\xe5\xba\x85FW\x9fS\xce\xa6\xa9\r\xce1\xea\x05LW\x0b\x05Z\\\xab\x07\x92\xf8\xbbX'
    temp = temp + b'I\x1cX\xdd\x9e\xbe\x87\xdf\x9c<\xbaGb\xde94\x81\x19\x1eF\x0e\x8c\xe7g\x82\xc1\x94\xa8\xdbS\x8f\xa3'
    temp = temp + b'1]\xb7\xb1\xc77\x11/\xf7\xebdx]\x80\x95h\xf8\n\xa1\xc69\xc4Oq\xdb\xa5RlZl;\xc4'
    temp = temp + b'\xe1\xbf\xca\xa5\xa4\x1e\x19OR\xab\x8f\xaf\x8b\xeaXn\xe8\xc9\x05\xb8\xed\xc5\xd9\xdcmk\xc7\xb8\x15=\xa5\x92'
    temp = temp + b'H\'\xb6\x17\xda\xd1\x9a?\x9d\xc0\xff\x7f\xc7\\\x9c\xe3\x84\xf3"\x1e\x90>\xe0\x9c\x91,0\xbcr\x9e\x15\x08'
    temp = temp + b'\x93"tC\xc7\x940#\xc6\x1ca\xa5\xa8\xfd8\xf9l\x08m\x19\\\xfb1R\x90\x17q\xffD\xda\xdf\n'
    temp = temp + b'v\x1d\xa3BAl\x08 \xac\xf8_G\xb1,\xad\xca7\xe2\xc0\xdb\xa8\xc1\x9a{#\xd4\xfb\xf7m\xaf\x7fP'
    temp = temp + b':\xe7\xe7\x16\x80-\xfe\xb5D|\x19\xabZ5\xf4Z\xe1\xe1BX\xff\xbd\x18\x8a5\xe66\xfd\xc6k\x16S'
    temp = temp + b'z\xa7\xe2YC\xcdM\xbaR\xad\x86\x9e\xfc5\xf9xD\xe3\xa0L\xfaja\xbcQD\x7f]\xee\x1d\x1a\x99'
    temp = temp + b'\xa1*\xa7\x16$\xa0nR\x1d0\xa7A\xa1\x91\xd1\xa9\xb9,~\xa6\xe0\x8a\xce\xb9\xe7\x95\xf1\x96\x03,\xe3\xdf'
    temp = temp + b'm\x87\xaa\xdc\xce\xdb\xeb\x98\xab\xdauO\xdc\xbe\xc2\x82\xd0\x9b\xd52\xecD\x7f\x96\xd4\x98~xfT\xf3\xc2'
    temp = temp + b'\x98\xb5|\xc3\xf9\x0f\xe6}\x91\x01|\x11I\x8bT\x82Ct\x8f\xa9\x19\x8d\x80\x1bhm\xaf\xc2b\xb6|"'
    temp = temp + b'\xe0\xe9\xc6\xb10\xa8\x128\x05\xaeZ\xb7\xc7D\x8d\x9b\xba\xec\xc2KT\xb2\x16\x8e@\xb8\xf0\xb5\x01\xde\x9d\x88'
    temp = temp + b",\xdc \xf0\xee\xa8?\n\x15\xcbO\xe7\x81j2H;\xa5\xfb\xa3\xb1\xba\xcd\xc5\xe7\xfc\xec'1\xe1\xa7\x12"
    temp = temp + b'Q\x9ay\x81\x9a\xab\x1dM\x12~S\xf7\xf2N\xe0\xf6\xcb\xbf\xd6\x82\x8a\xd57XMk\x94\x04\xb3\xbch<'
    temp = temp + b"\xed-\x02\x0e\xc3\xd1f\xd9J\x93\xac\x8f\xc2]G'yS\xdepyV\xe6\xd9^\xcf\x17\xa5\xf6\x8d\x1e2"
    temp = temp + b'/\xa51\xb1\xe5+a;s\xff+\xd5\xbe\xad\xcf&\xf8\xe20\x0b\x1eYM\xe4\xb6\x83\x96\x08c%\x90\xdf'
    temp = temp + b'$f\xb0\xff~\x8f\xc0t\x97\x7f\t8\x9d\xb7\xf8\x1c_r\xb4\xf0Cy\xb5\xa0\xc59\xba\x9e_\xde\x9b\r'
    temp = temp + b'\xa0W\xc8\xed\xbf\xbem\xb1\x18\xcb\xa1\xea\xc6\x99\xe2\xb21\x0f\x9e(\xc8\xaaF\x7fXG\x92^\xe2=Uc'
    temp = temp + b"\xa1\x9e\xa0k5\xbc'\xb0\x03c\xe1\xfc\x15D\x89\xf5\x1f\x0ebp7\xe3[\xf3\xe1\xf4\xffoZj\xf8\xcd"
    temp = temp + b'\xa5N\x86\x03\xe2\xa3\xed\xb5\x1f\x11\xccH\xe2\xa0\xff\xd0\xdeV\x1e\t\x82\xe4\x98O\x16.<\x11\xa3\xce\x1bF'
    temp = temp + b'R\xddi\x88\x19.\x0eh\x00\xe9\xd1\xa3\n\xf4\x10$\xf6"\x8aYK\xee\x01*\x91\xc1l\xd8\x06\xf61\\'
    temp = temp + b"\x8f\x88\x19\x88\xd0i\x14\x1b\x1b\x17\x95XJ/\\41\n\x94\xd3\xee'7y\xfe\xc4W\x06'\x06\x90*"
    temp = temp + b"\x1d\x05\x98\xdf\x0cz\x83\xd3\xfd[\xfa\xa8}m\x91\xcdR\xe0$\x96'\xe8\xa9\xe7^.\x8fH$\xae\x01\xb0"
    temp = temp + b'\x83\x8c\xa2!\x00\xf8\xba\xe4\x12\xd9\xe5\xee\xb7%e\xc6\x9d\xb4\x8a\xd4.\xc9\xb8\xff\xa3\x02\x86K\xab\x7f\xb0\x0b'
    temp = temp + b"\xa0$\x8bM\xf5\x89\x15'\x9c\x12,j\xa4\xdb<\xcc\xa6\xc9\x90_9\xdb!g9\x9a\x95\x15\xc3ls&"
    temp = temp + b"\xceIB\xa7\x00U^.k\xf6\xf0\xff\x86\xcb]\x7f\xe5\x89T'\xe2\x1fY\x94v\xb1\xf1\x9e\xb9P\x0b\xc0"
    temp = temp + b'\x9f\x9e(\xa8\xaa\xf6D\x8ca\xc2o\x962\xdd\x89)\xc5\xe61:\x8c\xd8M\x8eYx\xf5\xea\xb2\xf3\xbf\xe8'
    temp = temp + b'\x1ex"$\xe2\x99\xdf\xe6\xdbf\xcbA\xc8Bb`\xb3\xf1\'(\xcb\xad\x92\x9f\x1c\x81$\x83\xa1\xde\x92\x9f'
    temp = temp + b'V>\n\x1b\xe3\xc8 H\xb8\xc7S.\xaf\xf9\x9f\x9c\xc7\xde\x0c\x95\xd2\x8a0\\\x93\x18\xd4\xf1@$\x13I'
    temp = temp + b'\xfb\xc0\x02\xd12/l\x06\xf2\xf2z\xa0\xee\x8e\x15t\xecU<\xf0\xe7\xd7E\x0f\x01\xc1,\x03\x80+\x93\x9d'
    temp = temp + b'\x9f\x8a\xc3.KhI9&\xd5\x81\xc5\x8c\xdc[\xa6\xbe\x8f\xdbs\x18\x10Y\xcah\x18\xab\x97\x11\xfa})'
    temp = temp + b'4\xc5*e}\xe2e\x1dSS\xe3\x1a\xe6c<\x8e]pR\xa2c\x1c~w\r\x82\xcasC\x05\xea\xed'
    temp = temp + b'\x92\x03\xcfR\xc7\xe9\xabq\x044\xb2\xf9S\xd7r]}\x85>\xe5$k\xbb\n\xa6\xa3\xf8R\x0f\x8a\xa8\xea'
    temp = temp + b'En\x94\x83\xb6\xd3.\xa3@$,\x14\xfe\xa8\xab\xbb\x81\x985s\xb4\xd5s\x84>8\xec\x1b\xb7\xa6W\xb5'
    temp = temp + b't\xb8\xe0XBO\xea\xc3\x06U\x02\x00\xf5\xfa\xff\x92\xcd\xad\x80)A\x8a\xfb\x18I\xfcj\x03\x86\xa2a\xe2'
    temp = temp + b'%\xe2f\x07\xecH\xcf\x00\xf7N\xcb\xb1\x08{\x1d\xcelV\x96\x85#\x17m\xff\xdepK\xe3ds\\\xd6'
    temp = temp + b"\x17\x1c\x96\x00\x1d\xe0b$\xb7\xcfb\xa5\xa1,\xc3z\x13\xd1~{Ifz('\xe6'\x1a\xc1\x97\xc9b"
    temp = temp + b'\x8c\x8c\x99 \x8c\xa9\xe6\x8c%\x18\xb1iua\xd7W\xb5\xc2\xaa\xd4z\xcd8.\xd0\xbd$\xc0\x1e\x02\x97\xe3'
    temp = temp + b'\xf9t\xdc{\xbc\xecO\x1c\xf2\x1c\xef\x8e]\x982"m\x89\xe44v\x0c\xed\xca\x85Y\xd1\x8ax%0\xf8'
    temp = temp + b'#~\x02\xe0f~\xdf\x86d\xce+_\x11\xa9x\x0e\xcay\x076\xa2\x99r=L\x00;A\x9f\xf2\x84\xff'
    temp = temp + b"\x16/\xec\xec\x050\xd9\xba;>du\x9c\xd2\xa1|\x1b\xd0\xd1&\x8eG\xf6\x8a\xd9\xd7m;A\xb2\xd1'"
    temp = temp + b'2\xd7\xe3?\x9a\xb3[\x0e\x96m\x8e\xb7Q1,\xf6}\x9f|\xd5\x95\x9e\xf1[\t\x18{\x951!t\xc3'
    temp = temp + b'dHPb\xe3\xd2\xf2\xf5 \xec\xd5.\n\xbbm\x90T\xe3\xe1\xf5C\x07\xbd\x1b\x9f\x1b\x84\x81\xef\xa5\xe1\xb1'
    temp = temp + b'\x86\xdc\xae\x94\xc9\xbd\xfe\xd2]\xdeu\xa3\xb0\xd8\xee\xeat\x16Q%^\xcf05E\xf3\xf7\xb7\xae\xf3\xc9\xc3'
    temp = temp + b'\xc4\xeb\x97\x10V\xc4hh\xcb1\x07U\r\xb0\xa0\\,\xfeS\xd3\x1c\xa2C\x88I\xe4\xbd\xb0T\r\xa1\xdc'
    temp = temp + b'\x9c-\x8c\xe1\x9f>\xef>\x11\xf8\xf7E<\xe5\x80\xfd]\xbe\xa0m\xfd\x9f\xb1\xbb\xe1\xec\x9a\xfc\xa0P^\xf3'
    temp = temp + b"\xc9\x99\xb4\n\xdb\xf8\xb78y\xebC9\x1aD_\xb3\xfa1\xa9\xec\xfb\xc7\xbf<'\r\x19\xd1\xc1)\xe4w"
    temp = temp + b"\xf8\xa4;\x0b\x88\xed\xd6\xe2W\x9d\xddZ@\xf9\x9d'b;\x02\x02A;U\xd6\xa3z\x10\xc9|\xc3\x17M"
    temp = temp + b'l\xcfu&\x0eK$\x9f\xab\x91\x87J\xbe\xb2\x83h_\xab@\xd5\x8a~Pm$g\xcf\x84\x91\xbc\xf9c'
    temp = temp + b";\xc1\xd4\x9e\x87\xb5\xb7j\x1f\r\xda\xbd\xf9fBH\xd8\x1f\x12\xd3$V\xf4'\xb4w\x88\xdcf\x83q."
    temp = temp + b'|Dl\x93\xe3\xdf\x01\xd6\xfb0%N:*Q{\xe5\x14S\x03\xeer\xd8\xd8\x17\xa1f\x03,fm\xc0'
    temp = temp + b'ON\xa5]f\xbfvyQ)v\xb0\xadr\x99\x96\x90.\xed\xe2\x7fS\xa9\xa6\xdc\xcet\x82D\x97\x0c\xa5'
    temp = temp + b'\xd0\xf9r9\x8f\xe8_W\xfb3\xf5\xf7\x1e\xa5\xa2\x07Je\xca\xcc\x12\xf0\xbd(\x9c\xf8\xf3X\x12\x14J\xf7'
    temp = temp + b'\xa8C%\x89D \xfe\x9e\xa1\xd0,\xf6\xb2s_\xaa\xcf\xed44\x9bt\xe0\xaeSO\x8d\xc0\xfbEI\x7f'
    temp = temp + b'\x89\xe7\xdco\xc5Q\xb3\x1f}b\xdc\xd4\x91V\x07\x83\x7f\xe2\x98\x7f\x8e\xcbf\x94\xba\x87\x8b\xd57<\xae\xae'
    temp = temp + b'\xd2\x15\x80s\xc2>\x84!\xd4\x08"\xe5\xab\x88\xe4\x02\xf0\xff\xa08\xb4\x17\x05\xf9\x1e\xc0\x03\xf3\x99\x8b\xc2\x96'
    temp = temp + b'Yt\xf9\xfc\xfa\xa2\x0b\xdc\x89Z\xf6M\x80\x7f\xd5\xc1\x82\x03\x18\xfb\x1c\x0b\xfd\xd4\x87IK\xe7\xf5{\xa4\xbd'
    temp = temp + b'oJ\x1f;F\x81\xc19\xa5\x08\xa1IE/\xce\x9b\x00\x88\xe7\x18\xda\xb8=\xa8F]\x11\x9b\xf1\x12\xd1\xcd'
    temp = temp + b"\xd1\xc0\x7f\x91\xe3\x11%\xedT\xf3\xaf\x1a\xed\x92'o\x07Q\x84\xa3M\xe27\x15\xe0\xe5\xf6O\xb9\xa6&\n"
    temp = temp + b'\xdb~\xa4\xd8D\x96Y\xb6\xf7\xa4\xf2\xb9\r\x04\x13\x8dM\xbb\x16\xaa\xfd\xa6{)\xad\x99\x1c\x94\x06w\xab\xdc'
    temp = temp + b'\x12\xec\xeaMi\xaf\x82\xd2\xa5\xea\xbd\xbdy\xe4Z2\xc1#\xba\xba5s\xd0\tT\xb2\xb1\xa0\xc51\xb5^'
    temp = temp + b'\xb9\xa8\x00r\xabOw\xea\xff\x80hB\x17!\xf9\xa3\xe6\xd3\xdf)\x90\xbb\xce\xd4)\x08\xc7\xfc\xd6D*\xab'
    temp = temp + b'\xbe\xc8\xe0\xb6\x95\xf0\x1c\xfa\xfb\xa4\xfa\xbe\xf9X\x8c\xe4\x00\x0ch\xa3\xb4\xc1\xedF\xb36\xc4\x1a\x1f?\xd0:'
    temp = temp + b'\xe2z\xbd,\xf9\xd9\x14Y\xadSI\xb7(\x84\xd9\x97W\x13d\xd4\x9c\x05\xbe\x1anH}\x80.\xe4\xc3\x86'
    temp = temp + b'\xfbL?\xf47|g3\x0c\x1cc\xa3\xb2\xc6\x1d\x8b)\xb5d\x9c\xc8\xeb\xf9N\xc1n\xe9v\\\xc1\xc4\x17'
    temp = temp + b'\xb4\xc9=\x10\x90\xd9:\xc8#+\xe9\xb2\xb0q\xa6 \xd9}\x02u\x0el\xf3\xa8t\x9a\xb1\xd7\xbd}i\x08'
    temp = temp + b'`P|\xd0?@\x91&\x86\xdc\x82D\xa8\x14\xd9d\x17\x8c\x95\xec\xcf\xd5\xb5p\xfde\xafe\xc7\x0b\xb3\x8f'
    temp = temp + b']\xe1\xd7=S\x90#\xcapZ\xe1\xb6\xbf\x18o\x1e"\'\xe3^\xa4&`-c#]l\xf4\xb9\xf9\xbb'
    temp = temp + b'F\x93\x03\xec\xd9\xea\x1a\xac\x13\\\xf1\xdb!:?\x82\x1bdL\x95\x9c\xe2\xb2~\xce\x9b\xb7g>\xbc\xe3-'
    temp = temp + b'\xd1UOX\xeb\xe8Z\xa6\x182m\xb3\xad\xa1\x01Q\xcd$\xca7\xa6\xb6\xef\xcb&\xf8\xe4=\x8d2\x13\x04'
    temp = temp + b'\x9b\x1f\xcaa\x8c\xb7\xea\x95\xb6=\xd7L\xa9\x89\xe0\xccmR\x12\xda\xf0:C\x8c\x1d\xef\x02\xccG\xc2\x126'
    temp = temp + b'\xca\xe8\xe5\x9b_wf\xee4@\x13t7\xa6\xdf\x13\xdc\xdax\xffAS\x89\xda\x7f\xe6yU \x1a\x7f='
    temp = temp + b"\x0fq>\xf9\xad=f\x97\xdcX*M\x1b\xbaS\x96!\xfc\xe0d\xe2\x03\x1e,sM\xdf*\xc6'*\xc6"
    temp = temp + b'\xdf\x9cTk\x87\xa1\x1eS0Dr\xdd\xdf>\rB\x9b\xf9\x19\xcfVk\xe1<\xa6\xf5\x0cx\x91\x91\xef\xfa'
    temp = temp + b'\xb3\x04 \t\xe7\x04 \xbf9\xef\x97*\xbf\xcbH+NBM\x9c\x8f|\x924\xc5\xec\xaa\xef\xfa\x9dx\x17'
    temp = temp + b'\x9bt\xe8\x0b:\xdc\x7fQ|2Ufn\xbb\xed#\xbc\xc2\t\xfe\xb6be\x1ek\x93z:sb\xe9\x7f'
    temp = temp + b'\xa4\x97sM\xdb\x17y\x04\xa0\x8e\x00\xc7\x1b\xb0\t\x0clB\x87\xd9\xe5fc\xcbbdv"\x1e=\xc0f'
    temp = temp + b'\xdey>x\x8d?\x02\x0b\xb4o\x9a\x10P<\xb4Ja\xb7\x8a\x8b \xc0%xS\xd7I\x98\x08Xo<'
    temp = temp + b'\xcfoV\x86nO*\x07Y4\x1a\x96KJ\xca\xb1\xe7\xdaP\xb7D\x1e\xcd\x15\x9f\x806\xf92\xb6E\xcd'
    temp = temp + b'\xa6\xd5\x0c\xa5\xf2\x9e\x03\xd8\xd8Q\x1f_\xfb\x9e\x9b\xa3\xcaz\x8c\xae\xc7\xcdU(\xd4\xc6\xaa\x02\xcd\xeb\xa4B'
    temp = temp + b"\xce'\xc4G%d~\x91\x87\xe7\xcf\xad\xc6l\xffC\x92\x86\xc4\x94s\x08\x15{-+\xf5\xbfo\xd99S"
    temp = temp + b'\xc6\xdbSB\x1b\x1dN\x96c\xb3\xfe\x15\xf4\xe7W\xd8\xd7\xddwJ\xa4Tl\x0b\x88\xb4\xa6\x1d\xfasF0'
    temp = temp + b'\xb1\x02\x0f\xee\nbcu"\x01W\x95\x19\x8f1\x83k3\x19\x86#\x15\xb5\xb4D\\\xe6\xe3E\xd8.\xbc'
    temp = temp + b"\xb8\x97\xcd5\xf4\xe4_eJ\x17#\x0cf1d\x1b\xf0\xf7\xb6\xcb\x06\t\x1e\xbd*\x9cx\x13+\x9f\xec'"
    temp = temp + b'\xeci\xfd(0\t\x03\x16\x9a\xaey\xcc\xdc\xfbG9M\xc7j\xd6\xba\x91=\xbe]\xb0_\xf1\x0e\xfc]['
    temp = temp + b'\xaf\x12\xf2i\x85\xba\x07wzHzp\x02\x97Z\x16\xaf\x8d\xc4\x8d2\xac\x17\x97\x06A\xba\x84U\x1bi\xda'
    temp = temp + b'\xed\xd9\x00\x89I<\xe2\xdez!\xf2^\x08\xf6\x8bk5\x8b^\x0b4m\x900S\x08\xcd\xa7\xf5\\\xbc4'
    temp = temp + b'\xdfSv\x9e\x80\x15\xfe\xab\xc1\x93\x82g\x85\x02;\x15\xd2\xc5\xd5\xff\x92L\x8b\x0e,I\x92\xed\x83\xab\xaa{'
    temp = temp + b'd\xd6\xa1S\xf3y\x9b\xb9\xef\xcd:\x92i\xfe\xc5w\x8da\xea\xffY \x16\xd0\x85\x87\xa3\xf6$v\\\x85'
    temp = temp + b'\x8e@*E\xeb\xaa\xdc\xef\xcbSE/\x06\xd6\x0e\xc7\xf0j|%\xca\x13\xbc\x1f\xfcX\xf6\x11\xd4\x06S\\'
    temp = temp + b'\x02\xdc\xedK\x0e\xb4\x1ec)\xab`r\\\x99\xc4n\xf4\xd0i\x18\x07\x8e\r\xf1\xec\x932\xb3\x98\x84\xcf\x83'
    temp = temp + b'\xe2\x07\x81\xa8/\x17\xe3f\x06E5\xa9Wv\x02\xa6@\xdc\x0b\xae\xd6(\xb1\xf9\x05I:\xf7W\xa4\xd2\x16'
    temp = temp + b"\\I\xf4u$s\xdag\xf2?\xff'\x89=\xd9\xda\x18\xd5\xd3\xbbK?\xc5\xe9T\x1fS\x8fR\xc5\xf3\xf2"
    temp = temp + b'\x1da$\xd6Tjs\xdf*\x91\xda\xdd4\x11)\xb3\xf7,\xbd0\x10m\xae\xa4\xf2P\x1a\xf8\x81\xd6\xce\xc9'
    temp = temp + b'{\xaa\xc2\x8e\xdaI\xad\x80m\xbdf\xc7=hh\x80[\x93\xfd\x0ev\xf8Lp5\x16L\x1d{\xe1n\x9d'
    temp = temp + b'9\xd3)k}\xd7p<\x80\x8fr\xea\x9ayk\xcf;\xd5lz\\!1\x9b\x84\x16\xb5\x96U>\xc9\x8d'
    temp = temp + b'\xfe\xddP\xd9X\x17&\xa2\x90-\x8a\xa2\xfb\xd2v\x84\xd1\xdcZ\xcf\xaa\xd9Z\x8c\x8d\x9dP\xbb\xf1\xf2w\xdc'
    temp = temp + b'n\xee\x1b\x85g\xae\x01\xd1\xa10\tv\x0b\xae\x95[\x9b\x96+\xcdO\xb5\xff\xd8\x8d\x02\xde\\Ne\xd1\x92'
    temp = temp + b'\x99Bz\x12~\xae2\x11?\x7f\xe9%\xd2\xac]\x84\xbd\x91\xfd\x11\x1e\x9a.%\xd4\x8a/\x0f\xf82/\xf9'
    temp = temp + b'dg\xf7\xe4\xd5\x0b\xa0\xb8&\xdb\xabI\x92\x9d\xba\x8c\x95R\x1d\xbc\x93\x94\x8f\x16P\x13\x14j\xe8m}\xc9'
    temp = temp + b'yb\x8f\xabL\x1e\xa83\xd1\x0c\x9c\xae\xbd\x9a\x9e\xd2\x96w\x13lzY7c+\xd5u]\xf1\x02\x94%'
    temp = temp + b'\x83\xc2V\xbc\x91\xe5\x8f\xc6\x9a\xa3`\xe482Aa\xbc\xcc\xaa\x12\x1f|<%o\xe1\x03#&\xa2x\xa9'
    temp = temp + b"d\xa6$P\x13A\xce'Q\xc8\xaa32b\x90\xd2\x90\xf3K\xba\x01(\xbc\xd6q{\xc8CX\xde\x95N"
    temp = temp + b"\x17O\x96Y\x9c\xba'UYZ\xaf\x9e\x85p\x11\x01\rF\xde9J\xca\x93g)\x85\x04\xd9\xb5\xfc\xbc\xe1"
    temp = temp + b'\xa2\x8fh\xf9\x13{\x80\x1b\xa3\xc7bi\x14M\x0c\x15\x89\xe2\xd5\x8b\x84\xe5u\xff\x80\x19\xf5,P\x18\r\x16'
    temp = temp + b't\xc3S\x18mxj\xdc\x94(y^\xdb.\x03 \x1a\x06[\xbc\xb6s\xcf\xe6f$\x8d[s\x98\x02\xc1'
    temp = temp + b'\xec\xa8\xec\x7f\xbb\x0c\x1f\x0f\xc7\x11\xea \xb1]TzvY\x18\x9cU\xa2#\xfb\xf5\xfdnBx\xc1\xe6\x8f'
    temp = temp + b'1gr\x8b\x82\xaeI|b`\x89\xe0\x83[\x06h\x044\x05\xef\xf2\xce\x11J\xc5\xf80A\x8b\xef\xe1\xb3'
    temp = temp + b'f\x08g\xa3K\xc2\xa2\xb0\xefq-v\rS\xea\x8f\x9d\xf8\xb9b\xe5\x03\xffD\x90\x996\x8b\xbb@P\x89'
    temp = temp + b']\xc8g\x89\xb6H%~`\x87\xec\xa0\xe8\xb4\xbe\xa6\xca?\xa0S\xcey\x15\xf5\x9f\xdc\xe0/L\xcf\x13g'
    temp = temp + b'R?rM\xf4\x98\xf4\xd4\xe9\x0e\xef\xa5\xff\xcc\xccI\r\xb1\x1a\xf6\xa0\x00\xa6^\xf90l\x10\xa4{R\xf1'
    temp = temp + b'z\xd4%\xd6\xca\xde\xde\x99\xb5L\xfa\x82\xdf\xd4\xc6\xf0\x1e\xe6\x05`z?\xbe\x06\xc6\xc2!\xa9\x9b\xc8\x19\x1b'
    temp = temp + b'E\xa2\xbc\x03S\xa4\x0c.a\xc2\x8bE\x1ef}\xdb\xe6K\xdd\x01\x8c\x18o\xe9\xb6\xa5\xfe\xad\x84)=\x07'
    temp = temp + b'\n&n\xc1P\x95\xf8i\xdf\x1f\xaf\xc4u\xff$\x1a[\xa6\xd9incq\xac\xd4\x81\xab\xdd\xcb\xfbO\\'
    temp = temp + b'\xc2Dh\x99@\xb2\xc9\xbd\x89\xe4\xc5~k\xa3F\n\x1c\xd6\xfe\xf7\xd3\xc7n@\xc8\xca\x18\xf7\xa1\xa8\xfa6'
    temp = temp + b'\x06\xa1[\xb1\x84\xe1u\xb9\x1fJ?\xef\xf0!\x96\t\x84\x83\xfd\xc8cS\x92\x96\xb8:\x80\x11\xda+\x88\xa8'
    temp = temp + b"\x89b9\xe6\xa7\xfd\xd6\xcc\xd0\xe7\x87w\xe6{\xd1\x9f\xcaqCT\xf9\xea\x19\x93\x82`\x99\x9f'\x87\xfb\xe9"
    temp = temp + b"\xef}H\xc9\xc29p\xf7\xa3a\xe3\xffUCM\x07^\xd6\r\xda\x864\x0b\x81\xb6\x99\x05\xf2\xcb\x8d'/"
    temp = temp + b'\xee\xa1\xd7\xe1a>\xaea"\x99\x9b\xf0t\x1fkx\xdc[\xee\xd9+_!\xcf]\xcb\x9fa;=\x87\xbb'
    temp = temp + b'\x1dMi\x94\x9f\x98\xf6\xb0\xb2{\xd4\xc1\x93\x92\x08i\xa0\xd0\xb4\x88=+>\x11.\x1d\xca\xf7\x0b\xe6\x86\xd7'
    temp = temp + b'\x82\x9ck\xd1\xe6\x1e\x0b\x12\xd9"\xce\x0c\xf3V~\xee\x88^\xd7\x9b\x96\xeb|\xec\\C\x13ao\x07\xa4\x8b'
    temp = temp + b'g\xfd\xe5\x1f\xa62^@5_\x84T$\xe66i\x1b\x85\xdc\xedT\x91y\x90\x05\xb5\x86\xe4\x97\x92\xff\x14'
    temp = temp + b"\xe9\x1e*\xd8\x0e\x8fv=\xc2<[\xd1\xbb\xd9\xcb'e\xa3\xb4\x0b\xc9\xde\x8b\xf7\x12\xcd6\xa1\xd8Y\x1b]"
    temp = temp + b'C\x83\x99B\xab\xbf\x98\xaaX\x90\t\xfeZ+\xf7Q\xe3",\x1e\xd2\xb5NTy\xb3\xb0\xc9e\xab\x05 '
    temp = temp + b'\xd2\xa9\t\x8a\xc7\x9f;(o\x7f+\x831\xcb\xbb\xc5\x9dAW\x00\xb9\x1f\xabvT\xcd\xdc\xbc\x9f\x14\x1e{'
    temp = temp + b'((m\xa1E\xf1k\xe4\x8e\xaa\xdc\xfb(\xd1\xe4\xc1\x87]f<\xe4~\xf4\x82~\xe1Y\x1e\x82kY\xdd'
    temp = temp + b"\xa9\x8b\x8e|\x11\xe0\xd9\xe6\xa3\xe5\x00\xabj\xd53\xd3\x19&\x8eV\x12'\x11\xd1t\xcd\xb9\xa6\xf9\xe4\x0em"
    temp = temp + b'\x8b\xe2\x0e\xc1\xd58\xff\xd8\x08i\xa8\xcd\xa6]\x85\xd2&\xecF\x9d^\xde\x90fs\xf7[\xcb\xd8\xe7C\x11'
    temp = temp + b"\xb2\x10\x1c\\\x1f\xbc4\x04\xcc'\xcag\x15-\x9c\xeak^t\xa1\x82\xdb\xdf\xf7\\h\x8e\x1f\x10\xf0\xaaU"
    temp = temp + b'\x11\x02\xb5\x8b\x9ae\xb7\xd4;[ $x\x1bk\xce\x1d\xd7Q\x8egGU(\x9c7\xbc\xbc\x15\xd1w\x8d'
    temp = temp + b'\xa2\x9cZ<|\xf5\xd2\xf4R\x96L\xbf\xe1\xff\x14\x96.\x1c\xac\xf1\xac9\xa1\x8bE\x08(um\xfd3\xf8'
    temp = temp + b'L\x8e\xc4\xcfDq\xfe9)5N\xd8}\xaec;E\xa1\xb9\x11V\x13Oq\xb6]\x03\x9c\x99\x01\xbf\xf8'
    temp = temp + b'\x08\xd7\xcf\xb5aI\x07~<.Z\xefK>\x805\x13\r\xf3X\xbe\xffo3\xf6M\x985\xc0\xd5b\xc1'
    temp = temp + b'\xdc\x03J\xd1\xbcm\xa5Q\x85\x1b00:\xd2cZR\xb6\xba\xe9\xb1\xde\x07\xea\xdf\x83m\x92\xc8\x03y\xc0'
    temp = temp + b'\x12A\x0eK\xef4\xe3Y|o\xbes\xdc\x9b Ck\x07\xc4\x85G\xa7]BZ=T\x02\xe7\xe0\x9d\xc7'
    temp = temp + b'\x02@\x91B]\t\n\xef\x8f\x12\x16\xd0\xe3\xe7\xeb"\xca\xbf\xe1n\t\x7f\xa1\x1a\x08\xee\xb7f\xeb\x8d^\xad'
    temp = temp + b'|i\xd3R\x8f}.\xef\x10G~%\x93\xa0\x06\x16\xf8\xc6i\xf9\xcd\x9cj\x15\xae\xd5\x90\x15e\x1bnd'
    temp = temp + b'<D\xed\xbe\x0b\x007YT\x9c09,\x98\xe5\xa0\xe8Q\xe3\x18\xc8\x9dt\x85G\xcd\xa1+\xfe\xe4\xcc\xed'
    temp = temp + b'\x82H\xb1l8\xd0o<\xf6\xc5\x8c\x83l.\x91\xdc\x045vv_\xe3\xacw \xa8l\xeaA\x9fb\x86'
    temp = temp + b'\x1bB\x96\xba&\xd9\xa4\x02\xf9l4\x11\xfb\x9c\x9ed?N\xd9\xf6\xb9\xc8\x11\xe6\xbf\xdd\xd5/\x08\xfb4\xec'
    temp = temp + b'\xc6\x855\xd7\xf4\xd9c\x9e\xcc\x9cu\xaa\x80\xdee&\x95\xcb\x01\x8d\x9c\x84\xfd\x88\xf1\xfcp\xa4\x83\x03\xfc\x0e'
    temp = temp + b'A\xfa\xb6\x1f\xac\xef\xa0\xb9G\xec\xfbE\xdf\x8f\x889\xac\x82\x9f9\xd7O-\xb7\xfa\xf0\x07\x9b,\xd7rG'
    temp = temp + b'\xc7M\x89[\x92$[ \x82\xfd\xfea\xe5\xb7$E\x9a\xe0\xb5\xd6\x97fh\xd8\xb6\x9c\xac\xa5\x80\xd4\xee*'
    temp = temp + b'\xdco\x9c\xbf2`\xd5\xf8\xbf9\x12&{\xacY~\x12\x82`\xf8\xa8{\xc4xb\x00\xff\xc6\x8c\xab\rq'
    temp = temp + b'$Z\xa1\x17\x8b\x14\x12Y\xacU\x1bhQl\xf8I\x85\n\xeea\x88\xdd\xd5/)\xaf\xa9\x99\x93^\xf0\xc2'
    temp = temp + b'0\xb8*\xee\x97\x99\x18\xccs\xb4\xe9\xf0\xe2\xad\xbb*\xc0\xf7\xbc\xd9\x98v\xab\xcf~\xbc@9\xe1\x12s\x9f'
    temp = temp + b'\xab\xacll\x94\xf7M\xac\xa0(\xfa\xc8:\xc0\x84q\r?\x19B3v\r\x0b\xeb\x00\xcd\x0c\xb9\x0e0%'
    temp = temp + b'C^\xba\xf5\xe39L\xfdg\x0b]\xdee\xa7\xda\xab\x16\x1c\x16\x9b\x8f\xb5\xbc\xb4\xaau\xb3\x013\x92k\xe6'
    temp = temp + b'y8\xfe"e\\\xdd\xe2\xcc\x17:\x8f\xe7\x90\xcfg\xae\xb0;\x91\xdf\xffy{\xef4\xe9\x9a\x89\xc2\x10\xc9'
    temp = temp + b'\xed\xc2g!\xfc\x98d`Gp\xff\xff\xa6\xe6a\xa0\x9b/\xe8\xcc\xec\x1b\xba\xa6i\x92\xebo4\xf5\xe2\xef'
    temp = temp + b'E\xf7,d(\xc7\x08\x88B\xe9B\xfd\xe3\xa9{\x1e\xbaf\xcb\xf5\x94\x12\xd1\xcd\x83o\x9e\xcc\xdc\xd5T\x9b'
    temp = temp + b'U\x9a\x8eE\x83\xa8\xa3X\xef\xf8\x83\xad\xa4\x85\xb4\xa0\x13\xbe\x94\xe7\xb5\xd7Ap\xa1\x13\xf2\xf7H\x01dJ'
    temp = temp + b'\x99\xd0{\x1a(x\x84`p\xd5\x03\x9d$\x91\xcbR\xa1w\xce\xe1r\xd8E\x08\x02\x9d\x9d\xc1\xa2\x06\xc1\x8e'
    temp = temp + b'3\x04N\xef]=\xb3<\xe3\xba\xec\xf8\x03\xcd\xfb%\xa8\x1a\xe5-;\x00t\x00\x88\xeeI\xdb\x95L\xa1\x96'
    temp = temp + b'\xa3\xb4h\r\xeak\xfbC"\x82\xa7@\x8c \xa3UIj16\xa1~x\xd6>r(!x7\x7f\xe3'
    temp = temp + b'\x8a\xbb\xdfV\x08\x02\xc8\xe0\x0e\x93\x80Y\xce9\xd7\x82\x89K5^Nv\xb2x\x9cz\xe6Q\xfa,>\xbc'
    temp = temp + b'\xf4\xe0\x94L\xea\x04%_?\x19\xe5\x95\xc8\x07\x9d\xa7\xe9Z\xfe\x00\xbe\xe8\t\xc8\\\x86\xa7\xa4}\xe6\x84\x84'
    temp = temp + b'\xb3\xb8P\xa5\x817\x82\xad\xe1v\x0cd(\x1cJy\x90\xb8\x9a\xdd`\xa6\x9bp\xfc\xa8\x07\xb3J\x9fB\xaa'
    temp = temp + b'-0\xce8^\xe6Z\x907\x04\xa38\xa6\xb0\xc7\xef\x96!\x00\xa8\xd8/\x89Q\x8fl\x07\xf9*\xf6\x84\x7f'
    temp = temp + b'\x9b\xee\xf7&\x08*\x0b\xd2\xd7\x95\x1a\x01\xd5s\xeb\xc0W\x99\x97\x88F/"\xff#\xa7\x13\x19\xedLQ`'
    temp = temp + b'p\x81\xa1c[\xf5\xd5\x16"\x0e\xe5N\x8c\x9ay\x06\xf7\xed\xe0\x93\xee\\\xf24\xeb\xb8\xc7\xabt\x0f\xe4\xc3'
    temp = temp + b'\xbe\xfa7q\x95{C\xd0\x84\xff\xdf\x94\xa1\x7fw\x959\xd2\xcdI\r\xc5\xe2\xb5\xdbk^\xb2\xc3\x88\xee\xcb'
    temp = temp + b'-?\x89z\x98\xd2LLT\x019\x02&a.\x12\xdb\x99u+\x1c+~\xa3\xb2\x0f\xb4_\x1c\xea\xfed'
    temp = temp + b'Y\\\x96\x1a=q\xf0AD`\xcc\xf1\xbe\x1d\xbe\x82\x03\x8aPA\xeci(\xfb\xee5\xbe+\xe9\xee\x8b8'
    temp = temp + b'?\x0ez\xec\xed\x94\xb1\xe6\xc66\xcb\x06\xb0\x06\xb2>l\xedJ\xeb\x10)|\xe6\x94\x17\xcdA\xd1;\x10\xb0'
    temp = temp + b'\xe6\x85/\x92S\xc2\x18\x05h8\x1b\xad\x83$\x9d\xe6\xc5\xc1@\xd9\x99\x93\xb83\xe0M\xd6l\xaa\xc6<\xb3'
    temp = temp + b'\x15~!\x93\xa3\xe8\xce\xd4]\x1a\xc1\xfauP\xce\xa5\x873\xe4qM\x93\xe5wG\x1f`\xf1\n\xb0^E'
    temp = temp + b"'\xd3\x02x\x92\xaf\x07\xb4\x0e\x99_\xaa\xc2+\x0e/#\xe5\xc1\x89\x97{\xe7\x05e\x87\x8d_\xe7!B\x9b"
    temp = temp + b'r\'b\xa9\xd9"\x86\xd2\xd1p\xba{:X\xd1]\x96\xef\x0f\xd7\xb2\xfe\x1e\xc1\xe7\xd0\xde[w\xfa\x9c\xc2'
    temp = temp + b'wT\x95p\xf5}\xc3T\xe6\xd7G\x104\x8f;\xde\x82\x14^v\x8a\xc8\x0f\xd4\xa4\xd5Qy\x15\xaczj'
    temp = temp + b'\x075\x0e+\x17\x8e\xa7\x04\xcf6\xfewr\x80\xdd\xbd\x04<ty\x96\x99\xfb\xb9\xc1\xaap\xe6Ogn\xba'
    temp = temp + b';4\x1c\r\x9b\n\xd7\xd4\x89o=\x12\x80\xf7\xf0b\x12\xf07\xbe=\x98\xbe\x1b\xe0\xb4\x19\xa4\xf3Y\x84e'
    temp = temp + b'\xf6\xdc_\xfbn\xf4\xa4q\xa3\x1e\xc5\x15\x81\xab\xcb\xe0\xcd\xbb\xb6\xb5\xf9\xb3\xd0\x07,\x1e\r\xcbe\xba\xf6\xab'
    temp = temp + b'\xea\x84\x83\x12\xdcB@\xcc\x1b\xaa9\xeb\xa5\x95[i\x90\x12\xde"\x96][{\xa8\xd6Q~\x06\xd2\xf1\x12'
    temp = temp + b';\xfbR/\xa8\xeb\xb9M\xf0\x7ff\x10=F\xf0\xb8\x84\xeca\x07\xaa\xad9\x92\x1d\xe5\xaaB8Z-F'
    temp = temp + b'v\xb8\xd2/T^E\xcaZ \xd5>\xfe\xd9\xf3\xef\xe3\xdc\xd9Ctzt\x95\xffL\x05\xca\xca\x83L\xe2'
    temp = temp + b'\xd8B\xf3\xcd\xc4\x8b\xb3\rRQy\n&r<7a\x1f\xa0\x94\xa4x\x7f\x87\xe1|3\x1bL\xe9M\xb0'
    temp = temp + b'\x8e\xb8\xd79\xa6\xd5\x91\xb2\xbb\x8f\xaa\xdc&\x1e\x97\x82A\xbe\xa2\xbfE\x00\\\xf5O\xfc\xd9rH&}\xa5'
    temp = temp + b'\x9eY\x8al\xdaU\xc7u-\xe6tr\x03#\xa2\x9c\xf6\x0e\xe2N0\xc2\xbb\x11\xe1\xabJ\xfb\xd3\xbf\x19\x8f'
    temp = temp + b'??\xad/^\x15\x0c~\x98\xcd\xe3S$\x8e\x9c.j$F\xc7r\x91\xd2}\x92}\xdar\xecPp\x94'
    temp = temp + b'tj\xa9\xa6\xa72\x94\xe5\r\x8d\xc0=\xf0\x86J%\xa9\xb2\xaf\xdd\xa6\x86\xe0\xb2\x1b\xc0pI\x8d1^+'
    temp = temp + b'\xe0\x0fM\x88i\x8b!\xa7\xael\\B|2]4\xab\xf8.,\x91F\xea\x0cb\xe5f\xbd\xd04)0'
    temp = temp + b'\x97\x12A\x1c\xa2\xdfrJ\x89;\xee\xb6\x15\xd1\xfd\x19\xf4D\x04:<\xf5\xe5\xab\xfe\x05\xe1\xf9\xdf|\x0f,'
    temp = temp + b"72\x81h\xd4\xd6\xf7l\xaf\x07\x7ftJ\x1e\\\xeeiS\xfd\x1c\xb2\x0f\x1c\x1a\x8e'\xa8\xbe\x8f\xe8\xfd\xa5"
    temp = temp + b'\x93H+\xfd /\x8b\xb1\xb0\xe1\x9f\xa1\xaf\x0c\xf5\xf7D\x95\xbc\x9d\x8eG\x10a~t^\x9c\\g\x7fV'
    temp = temp + b'\x13\xe3*\xcf\x94\x9a\xa7\x92\x15\xdb(\x87\xcap\xb2\xa3~\xf8\x1d\x02Z\x9a\xd28i\x91%\xb1\xa6\x01\xdb\x96'
    temp = temp + b"\x92W\xa9c\x93\xec\x1a+\x14^c\x18\xa3\xf7\xac\xf3\x89\xc5\xd6O\x83\x14\xb1'\x8d\xb7=\x8f\x91\x87Zz"
    temp = temp + b'\xad\xb2\xf5\xbb\x8c\xb8x&>\x06_h73\xfa+)K\xbew\x96j\xd0\x96\xd8d\xe4,6\x86\xb0\xcd'
    temp = temp + b'\x1e\xd808\xf9\xe2.\x9aq\xd4\tm\x06\x94z\xce\xc3Z/?\xbe\xe6\x90/aj\x1d0\x9b[\x1b\xd6'
    temp = temp + b'\x04.\x1b\xfc\x9b\xa9\xa1\x1c\xc4\xe9$u\xbb\x17\xaaM\x9ff9\xb2#\xd0\xc8-\xa6\x05\x7fr\xa8b{\xa1'
    temp = temp + b'\xdaBB\xca\xddc\xafFG\xf4\x80\xe2\x08j{"\xe6\xbb\xd9\x9f%R\xb8\xe1U\xf2/\xbf?\xd9#\x8d'
    temp = temp + b'\x1d\x91\xec\x07\xdc\x10V0BNh\x0f\xc5\xa0k+\x88w\x00\xd2\xc6I\xd4\x0e\x86}}\x8a\xd4\xc8\xc3\x02'
    temp = temp + b'\xe5\xc8"\xf6\x95\x05\xa7\xc3\xb6\xb0\xd6\xebI\xed\x89\xd8/\xd4\x08\xa4\xf8c\xbd\xe0\x90U\x8b\xbaT\xce\xc3\xde'
    temp = temp + b'\xe3\x9b"\x9dUG(\xd2,\xf6\xef\xef\x0e"j\x8eN\x89\xae\t\xa82\x89\x86|\x13\xd2:\x19\x14\x0b\xe5'
    temp = temp + b'\x87q\x95\xe1m-\xcd\x88\x1b\xe2$\xc0h\r\xc2);Q\x9c\xba\xae\xac\xec\xcc\xa9\n\xbb\x8e\xc0\x89\x87\x9a'
    temp = temp + b'w?\x81\xa6\xfd\x0c\x88\xc7\xe0ucL5\xdf\x18\xd6L\rHB[n\xff\xdc9\xd4\xf9\xca?\x0f\x11J'
    temp = temp + b"\xceb\xa6ue\x935\xfa\xff\xd6a'86\x0f\xee\xc9\xfdA5\x80\xd7JI'$5\xb3E\x8dx\x92"
    temp = temp + b'\xac~3QV:\xa8JQy\xe3}\xeb\x0eN/Z\xfe\x95\xd1\xac\xc5\x88w\x95\xf3\x7f\t\xb5\x8a\xb1^'
    temp = temp + b'\xcb_\xcd\xcf\x19\xab\x8e\x8d\x07\x80\xa1\x7f\x00\x83\xc6bc\x8b\xdcV20\xa0\xb4i%\x8d\n\xb4f\xe8\x10'
    temp = temp + b'\xb0\xec\x0b%\x1aP\x03\xd0\x01\x8fX\xb1\x1aN\xd9\xfbl\x18\x07\xd4M\xa1\x9b\x15\xa6\xe5|\xb8}X\x1dj'
    temp = temp + b"n\xdecDS\xe8J1*&5[\x9e\xadP\xa6'~\xd7y\x82\x176\x13\xf6\x8d\x13\x12\xd9\xa4\x88f"
    temp = temp + b"\xab\xa2\x90\xdd\x9chW,\xb6\xa9'`b\xc0-3VKEU7\xbb\x81\xab\xed\xad\xbd\x0c(f*\xc5"
    temp = temp + b'\x04\x99\xa5O\xeb\xd1\x03\xd0S\x86eLQ\xae\x04}\xde\xf0 \xde_\xe4ev\xab1\x8c\xf8v\xf1i\xe6'
    temp = temp + b'\x02\x82\xf0\x173\xeaGi\xc6\xaa\xe1\xc0n\x88\x95#\xc3\t^\xdd\xe3i\x8b\x12x0\xcd\xf8H\x13\xbc\x82'
    temp = temp + b'!\xf2\xd9\xb8\xf7\xc7\x98\xc0*\x04a\xdd\xa1L\xfe\x11\xffk\x8b\x08%+Ax*\xa5\x07\x11\xbcw\x0e\x92'
    temp = temp + b'\xafc\xdd\xc1\xdf\x97\xac\xcad\xd3\xd7\xdb\x8c\xa2l\x16\xe7\xb6\x8d\xdc\xceF\xdc\xbfLl\xed\x0c\x1a\xf6%8'
    temp = temp + b'\x95\xb3e\xb0SO.\x07\x813\xc7\xfc4\xbe\x14\x97g\xa4\xf1\xe6\xd3\xa5\xc83\x9f^\xd2\x17\x92<\xb8\x13'
    temp = temp + b'Ma\xc1e\xcd\xcej\x82\xcb\xb3\xef\xd8\x95\x9d+f/\xe5u\xc7\x1b\xd3B\xfa\x1c\xfbY"{\x9d\xa3\xd5'
    temp = temp + b'\x0e)\xfc\xb4\xa94\x1a&4\x91\xf0\x93\xaf\xc0\x9dl\xecrh\x10\xd1\xb2Q\xdf\xae\x1dk\xac\xef\xf4\xf9\xf8'
    temp = temp + b'\x19\n\x11\xbc\xd3\x8e\xe7\x8e;\xe0\x053/\xb1\xb1\n\x9e\xedq\xd1\xb2\xe6;[\xe4\\\xe7\xb3\xf4\xb6$\xd8'
    temp = temp + b'\xef"v\xc8c\xa9\xce\xdcTU\x1a\xbbV\xf1\xaa\x88\x0e\xc8\x85Z\x10\x81\x16d\xfa~>\xb0\xaf\xbbA3'
    temp = temp + b'I\x1eCaZ\xc3\xf4Up\x9b\n\xc0\xadKb\xc0\x91IfT\xb2o\xab\xf7\x88\x07\x0b\xd2\x1d\x86Gm'
    temp = temp + b'\xeeDmGln\x19\xc1GBE\xef\xa0&\xd4\x92\x06t\xf5\xf3jg\xcc\t\xd2q\x8c\x85Kx\xbay'
    temp = temp + b'(sb|\x12);+g|\xfc\x00\x8bD\xa9\x96\xed0\xf9\xb0`\xf9\t\xc2\x8c\x8d\xf3\xa8.\x03\xe2u'
    temp = temp + b')\xcaX`\xf5h\xd0\xab\x10\xc4\xd1\xcc\xad\xbe\x0c\xe8\xb1\x95*\xe5\xcb\xd5i\x19\xf03\xb1\x15\x108\x93\x17'
    temp = temp + b'\x9e\xb0\x84\xf8\xb9s[\xba\xaa>#\x82o\xd5Cv=r\x9a\xf8\xd3MU\x02/\xdbr\x97\xd6;=|'
    temp = temp + b'_KQ9\x07\x9e\x8a3v!\xd8\xfe\xab\xc5\xab0\xbb\x04\xb2=\xda\xa5f6\x1cz\xf1\x86y\xb3[e'
    temp = temp + b'\xbe\xc87\x97\t\x86\xe4\xd7\t\xb97\t\x05\xf7\x95\x9a\x03/i<f\x81\xcf\xb4\xfa\xc2\x02\xd4\xf6c\x84\xff'
    temp = temp + b'\x02xNT\r\x0e"\x7f0\x0b\xd2\x04\xe9\xdb\xf1zA)\xb6\xe2\xfa\xbf\x8e+\xf5\x92\x01\xf9\xc0\xec\x11\xbf'
    temp = temp + b'U\xf4\xcf\xdb\x89\xcd-t\xdb\x9f\xaeE\x9d{\xdc\xd5\xf7"B\x9dH\x01\xed,~|\xaf\xa8I\xb3`\xb3'
    temp = temp + b'\xedmg\xaa/,\xd6\xdf\xa6:\xabt\xd2\x06|\x0e\xc6\x16Hq\xc8g3>Ic\x96\xa0T\xb2\x9d;'
    temp = temp + b'f\xb8\x02\xd9\xce\x8b\xad\xe9X\xbe0\x9a\x03l\xa2\xf3z\xb9)PT\xfcK\xf6)\x8ak\xfd\xad\x8fP\xf6'
    temp = temp + b'\x81w\x92\xc9\xfa!\xee\xb9\xc11\xfc\xdff>U\xfb\xa1\xc5\x90\xad\xbd#U\xf6@\xca\x18\xc3\xdeT\xfep'
    temp = temp + b"\xf8\x1b\x15\x19\xdb'\xf7Sd\xf8\xec](IH.5\xec]\x9b\xe5\x95_\x81coF\xad\xa1j\xbeP"
    temp = temp + b'\xb39\x92\xfc]g\x8e\xdb9ji,\xcf\x7f\xc1\x12\x1f\x90^\t\x82\x06\xb4\x86k5\x0e(dH\x82\xca'
    temp = temp + b'\xa0\xf2\xfc\xd4:\x17\x89\x02*\x90\xfd\xeaJ\x05s+(\xe3wxS\x8a\\co\xab9Xa\xff\x8c`'
    temp = temp + b'y\x06\x84RC\xc3\xa8\xe47\xb5\x05{\x1d|p\x14\x90\xd4k\xab\xd1\xce9\x99\xdb\x8e\\\x17\x87\xe5\xb2\x0c'
    temp = temp + b'w\xa9\x1e\x8d\x076I\xad\xcc(\r\xbdN\xc1%\x15\x97\x1aW/8\xda#n\x95p\xb1\xef/\xe2Nv'
    temp = temp + b"eGd\x89\xc9L\xf1'\x86_\xbc\x1c\t\xdc\xb0Qx{\xb9\xb5\xadj{t\xfa\xd2_\x1bp\xff[\xc6"
    temp = temp + b'\xca\xc7\x04be\x99,\xf8\xbc\x95\xb8LC\xce\x05\x91\xcc\x08\x8eo\xa1\x19F\xa6\x00\xdfO\xde\x98y\xe4\xd2'
    temp = temp + b'X)\xec=\x83\xf8\xa5\x0f\xb0A\xbb\xa5\xcf\xc4M\xb34\xf5\xa3\xcc\x03Lt#\xee\xf0\xba\x8aa\x9c\x19\xce'
    temp = temp + b':\x1a\xc8\xc3\x96\xe2\x94\x90\x7f\xad\xeaa\x18\xc7w\x96\xae\x92\xb6\xa0.\x99\xd9{M\x80\xa79&$\xc3\x8d'
    temp = temp + b'\xa5K\xca-1\x80@\x93\x19\xbbNwP1E\x99P\x8e\xa8\x89SK\xe6\xe6\xb0n\xe3\xb61FL\xc3'
    temp = temp + b'\xc2\x1e\xec\x02\xeb#\xbd\x12\xc3\x0f4\x84V\xd8\xd5\xcb\xba\xd9\xab\x04tm%\xb2Y\xb6\xc3)\xac\xe4/M'
    temp = temp + b'?(\x80=Q`S\xff\x15\x82\x069\xac\xc09\xc3\x9e\xd0\t\xd3\xa6.mrX)\xb69\x04\xcb\xa3\xf7'
    temp = temp + b'\x10O\xcb\xdf-\xe31<h\xfc\x9c\x9a\xe1q3\x00\\\xc1\xc3$\xe2\xccO\x84f\xab\xd9l\xab\xa6\x8b\xdc'
    temp = temp + b'\x17oVl\x8d\x9c\x92.7\x93\x1e/\x11\xc4{\x9f\xfb\x860Q\xd4\xaa\x1e\xc8\xc5\xd5N\xda\xec\xe3\x17\x1c'
    temp = temp + b'\xad4@\x84y\xc3;\x90\xed\xb5+\xc2\xd8\x1e\xcd2n\x91F\r\xfdg\xad\xc5(\xefU\xa5\xa0n\x9d\x81'
    temp = temp + b'X\x0b\xb9:!;\xcdy\x82\xfb&&\xfd\x9c\xccJ\xf2\x07=;\xc7\x18\xbb\xc39n\xfb\x84\xbe\x8a\x06\xae'
    temp = temp + b"d\x07l!\x06R\xeb\xec\xff@\xe3\xefJ\xec\x8f\xc52\x92k\xf4\xb4\x9d%nF{ \n\r'\xba\xdd"
    temp = temp + b'#\x82`\x91\xe4\xc2\xed\x0b\x1a\xe1\xe2->k$\x97\xd3$-g\xf6\xc8\xd2\x99M\xda\xd8\x9f\xa0*\xd4\x13'
    return temp # bytes 8192B

# generate basic png data 128 * nB # png 4391B + zero pad 89B
def genbpng():
    temp = b''
    temp = temp + b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x80\x00\x00\x00\x80\x08\x06\x00\x00\x00\xc3>a'
    temp = temp + b'\xcb\x00\x00\x10\xeeIDATx\x9c\xed\x9d\xd9s\x1b\xc9}\x80\xbf\xee\x19\x00\xc4A\x90\x00oR\x14EQ'
    temp = temp + b'\xb7\xe4=\xe5=\xbc\xbb)\x9f\xd9\xb86\x9bds\xb8\x92T\xa5\x9c\xd7\xfcKI\xe5\xc9I\x9c<\xc4e\xc7'
    temp = temp + b'\xdeT\x1c\xefV\xb6l\xef:Yy\xbd\xd2\xea\xb0HI$E\xf1\x02\t\x12\x04q\x03\xd3\xddy\x18\x90\xe2'
    temp = temp + b"}\xc8Z\x82\x8b\x99\xaf\n/ \xd0\x1c\xcc|\xd3\xdd\xbf\xee\xdft\x8b\x0f'\x7fb\xf0\xf1,\xb2\xd1\x07\xe0"
    temp = temp + b'\xd3X|\x01<\x8e/\x80\xc7\xf1\x05\xf08\xbe\x00\x1e\xc7\x17\xc0\xe3\xf8\x02x\x1c_\x00\x8f\xe3\x0b\xe0q|'
    temp = temp + b'\x01<\x8e/\x80\xc7\xf1\x05\xf08\xbe\x00\x1e\xc7n\xc4?\x15\x08\x84t\xdd3Fc\xcc\xf6\tI)$\x08'
    temp = temp + b'\x01\x80\xd6\xeap\xe5\x0b\x81\x10{\x97\xbf\x1fRJ@\xec\xfd!c\xd0F\x1f\xbcL!\x11R\xae\x97\xaa\x8d'
    temp = temp + b'Ak\r4nB\xb6\x01\x02\x08\xaaN\x95\\!\x8b1\x86X\xa4\x95\x96`\x18\xb3\xe1$\x08!Y-d'
    temp = temp + b'\xa9\xd6\xca\x00\xc4\xa3\xed\xd8v\xe0\xe0\xe5\xd7\xdc\xf2\xc1\x10\x0eE\x89\xb4D7\x95\xbf\x1f\xc6h\x96\xb3\xcbu'
    temp = temp + b'\xf1v\x93\xc0\x10\xb0\x83\xb4F\xdb\xf6?"!\x91R\x90\xcd\xad\xb0\xb2\xba\x84\xa3\x1c\x84\x10\xc4c\xed$\xdb'
    temp = temp + b':\x11\xc2:\xb4\xe4O\x8b#\x17\xc0\xb2,\xa6S\xb3\xfc\xf0\xfd\x7f\xc6Q5\xde|\xedOx\xe6\xdcUj'
    temp = temp + b'N\rpOV\xa9\\\xe0\x07\xef\xfd\x13\x99\xec"\x9d\x89^\xfe\xe2\xcd\xef"\x848\xd0\x9dl[6\xb7\xef'
    temp = temp + b'\x7f\xca{\xff\xfbc0\x86\xe7/\xbe\xc2\xd7_~\x0bG\xd5\x0et|\xee\xff/\xf2\xc3\xf7\xff\x85\\1\xeb'
    temp = temp + b'\xd6D;\xa0\x94\xc3\xf0\xc09\xfe\xf8\x1b\x7fU\xbf\x8bwFJ\xb7\xbc\x8fn|\xc0\xd8\xc4M\x8a\xe5"Z'
    temp = temp + b'k\x84\x10\x04\x03!N\xf4\x0e\xf1\xc6\x0b\xdf\xa2+\xd9\xdb\x10\t\x1a\xd2\x04\x18\xa3\xa9T+8\xaa\xb6\xed\xe4'
    temp = temp + b'Y\xd2\xe2\xc6\xe85\xe6\xd3\xd3\x08!\xf9\xd2\xd9\x17\x88\x84\xa38\x8es\xb0\xb21<\x9a\x9f\xa0R-#\x10'
    temp = temp + b'\xcc,LQu\xaaXR\x1e\xa2)0TkU*\xd5\n\xe0^\xec\xad(\xe5P\xae\x94\xf6,E\x08A'
    temp = temp + b'\xadV\xe5\xdd_\xfc;\xf7&o#\xa5\x05\xb8\x92*\xad(U\x8a\x8cM\xde&\x9dY\xe0;o\xfe-\xed'
    temp = temp + b'\xf1\xe4\x9e2}\x1e4D\x00Xk\xa77W\xafRHV\x0b+\xdc\x1c\xfb\r\x00\xbd\x9d\x03\\\x1ay\x16'
    temp = temp + b'\xa5\x0evg\x08!\xa8\xd6*,fRH)\x11B\xb2\xb2\xbaL\xa1\x94\xa3-\xda~\xa8f`\xad\xc6\xe9'
    temp = temp + b'\xeb<\xc1s\x17^\xda\xf6]c4\xf1h\xfb\x9eRY\xd2\xe2\xce\xc3\x1b\x8cO\xdd\xc5\xb2l\x92\xf1N\xae'
    temp = temp + b'^y\x8dDk\x92r\xb5\xc4\xf5\xbb\xd7\x98\x9a\x1bg9\xbb\xc8\xf5\xd1\x8f\xf9\xfaKo\xa1\xf1\x88\x00;!'
    temp = temp + b'-\x8b[\xf7>%\x93K#\xa5\xc5\x97/\xbfFK(r\xa8\xea;W\xc8\x92\xcde\x08XA\x0c\x86R'
    temp = temp + b'\xa5@z9E\xa25\x89V\x87;\xb9\xc6h\xe2\xb1\x04/\\z\x05\xb3CgO\x1b\xb3c\xed\xb0\x91\x87'
    temp = temp + b'\xb3\x0f\xd0F\xd3\x12\x0c\xf3\xed7\xde\xe1T\xffY\x94v\x90\xd2b\xa0g\x88\xef\xbf\xfb\x0f,e\xd3L\xcd'
    temp = temp + b"\xba\xb5\x96m\xdbO\xd4i}R\x8eM\x18(\xeb\x17\xef\xe6\xd8'hm8\xd13\xc4\xd9\xa1K(}\xb0"
    temp = temp + b'\xaa\xdf-C\xb0\xb8\x9c\xa2T.\xd0\x1am\xa33\xd1C\xcd\xa9\x91Z\x9e[\x8f(\x0e\x8b1\x9a\x9aS\xdb'
    temp = temp + b'\xf1\xb5\xdf\xc5\x07(WJhcH\xc4;\xe9\xe9\xe8\xa7\xeaTp\x94C\xb5V!\x1em\xa3\xafk\x10c'
    temp = temp + b'4\xc5r\x9ej\xcdm\xb6\x8e\x92\xe3#\x80\x94\xdc\xb9\x7f\x9d\xe5\xd5E\x02v\x80\x97\xae\xbcA(\xd8r\xa8'
    temp = temp + b'\xbbA\x08Aji\x16G;t%{8\xd5?\x826\x86\xf9\xf4t\xc3z\xd9\x00\x18C@n\x8fb\x84'
    temp = temp + b'\x10\xd8v\x00\x83\x1b\x0e\x1e\xe5\x9d\xbf\xc6\xb1h\x02\xdc\xaa{\x85\x1b\xa3\xbfF\x1b\xcd\xe9\xfe\x11F\x06\xcf\xe3'
    temp = temp + b'\x1c\xe0\x0e[/\x03A\xcd\xa91\x9f\x9e\x06 \xd9\xd6EW\xa2\x07KZ\xa43\x0b\x14K\x05\xc2-\x91\x06'
    temp = temp + b'\x9cd\xf7\xff)\xa3\xb6\xd5B\x8er\xb8z\xf9+\\\x18\xbe\x82e\xd9\x84B\xe1C\x8d+<\r\x8e\x85\x00'
    temp = temp + b'\x96\xb4\xb8\xf3\xe0\x06\xe9\x95\x05B\x81\x16^\xba\xf2:\x96e\x1dN\x00)(\x14\xf3,\xad,bI\x9b\xee'
    temp = temp + b'd\x1f\x1d\xed\x9d\x04\x03Ar\xc5,\xd9|\x86h$v\xe0\x0e\xe5\xd3"\x18\x08\xb9\x9d\xd1\xdc\x12\x99l\x9a'
    temp = temp + b'\x9e\xce\x01\x9cz\xc8k\x8c\xa13\xd1Mw\xb2\x17\xc3\xce\xd1\xc6\xe7M\xc3\x9b\x00!$\xf9R\x8e\x1b\xa3\xd7'
    temp = temp + b'0F3\xd47\xc2\xc9\xfe\xd38\x87\xbcPBH\x96\xb3i\n\xa5<\xc1@\x88\xb6X;\xb1h\x1b\xd1p'
    temp = temp + b'\x8cZ\xad\xca|zf}t\xf0(\x19>q\x0eKJJ\x95\x12?\xfd\xe8G\xa43)\x02v\xa0>\xd2'
    temp = temp + b'\x08Zk\x1c\xe54\xe4\xe2\xc31\x10\xc0\x92\x167\xc7>!\xbd\xb2\x80e\xd9\x94\xab%\x94r\x0e\xddg\x13'
    temp = temp + b'@*=K\xcd\xa9\x12\x8b\xb4\xd2\x1eO\x12\n\x84h\x8b%\xd0Z\x93J\xcf>Q\xf5/\x84@Jk\x87'
    temp = temp + b'\xd7\xfe\xa7Ni\xc5\xb9S\x979=x\x0e\xa5\x15\xb3\xa9)\xfe\xf5?\xff\x91_\xfe\xe6=r\x85,\xb6\x1d'
    temp = temp + b'\xd8u\xa0\xe9\xa8hh\x13 \x84d\xb5\x98\xe5\xce\xfd\xeb\xc8\xfa\xf8\xfd|z\x86\x99\x85G\x9c\x1a8s\xe8'
    temp = temp + b'\xbbb>=\x831\x86\xf6X\x82\xa0\x1d\xc4\xb6l\x92m]\x8cO\xdfcay\x8ej\xad\x82m\x1d<\xcc'
    temp = temp + b'\x92\xd2bf\xe1!\xdf\x7f\xf7\xef7\x8d\x02\x18\xad\x89Fb\xbc\xf9\xda;\xf5\x8e\xea\xce\xed\xb61\x86\x80\x1d'
    temp = temp + b'\xe0\xdbo\xfc\x19\x81_\xfd\x84\xb1\xc9[\xe4\nY~\xfe\xc9\xcf\xb8~\xf7\x1a_:\xf7"/\\|\x99h'
    temp = temp + b'$\xde\xb0\x1a\xa0\xa1\x02X\xd2\xe2\xb7\x0fn\xb0\x9cMc\xdbA\x00*\xd52\xa3\x137\x19\x1e8s\xe0r'
    temp = temp + b'\x84\x10\x94*E\x163\xf3\x08!\xe8\xea\xe8%\x10\x08b\x0c\xf4t\xf4\xd5\xc7\xe13\xe4\xf2Y\x92\xed]\x18'
    temp = temp + b's\xf0\x81\xa5b\xa9@6\x97\xd9\xf4\xbe\xd6\x9a\xf6x\xe2@\x1d6\xad5\xd1\x96\x18o\x7f\xf5;\x8cN^'
    temp = temp + b'\xe2\xda\xad\x0f\x99O\xcf\xb0\x9a_\xe1\xc3\xdf\xbc\xcf\xd8\xe4m\xbe\xf1\xca\x1fr\xaa\x7f\x04\xe5\x95\xa1\xe05\x84'
    temp = temp + b'\x10\xa43\x0b(\xed\xf0\xc2\xf9\xab\x14\x8a9\xeeN\xdcd|z\x8c\xd5|\x96h\xa4u\xd7\xbbk#RH'
    temp = temp + b'\xb2\xf9\x0c\xd9\xfc\nRH\x12\xf1N\x8c\x01\x83&\xd9\xdeE\xc0\x0eR\xaa\x96X\xcc\xa4\xe8Lt\x1fx\xac'
    temp = temp + b'\xcd\x18C<\xdaNOg\xdf\xa6\t;c4\x91p\xac\xde\x0c\xec_\x9bh\xe3\x8e\xfd_>\xf3<g\x06'
    temp = temp + b'/2:y\x8bk\xb7>dqy\x8et&\xc5\x7f\xfc\xcf\xf7\xf9\xf3\xdf\xff.\xfd]\x83G.\xc1\xb1\x88'
    temp = temp + b'\x02\xa2\xe1\x18/]y\x9d\xe9\xd4C\xc6&o\xb3\x9a_ab\xe6\x1e\xcf\x9e\xff2\xce\x01F\xef\x84\x90\xa4'
    temp = temp + b"\x96\xe6\xa8\xd5*\xd8v\x90\x9e\x8e~\xb7S`\x04\xc9x'\x91\x96\x18+\xb9e\xe6\xd2\xd3\\<\xfd\xa5\x03"
    temp = temp + b'\x1f\x97\xd6\x8a\x9e\x8e\x01\xde\xf9\xc6_\xef(\xa21\xe6\xc0\xcd\x891\x06\xc7\xa9a\xdb6\xcf\x9c\xbf\xca\x99\x93'
    temp = temp + b'\x17\xf8\xe0\xdaO\xb99\xf6k\n\xa5<\x1f\xdf\xfc\x05\x7f\xf4\xb5\xbf<\xf0\xb1=-\x1a\xde\tT\xca\xe1\xca'
    temp = temp + b"\xd9\x17\xe9h\xefb\xb0w\x98X$\x8e6\x86\xbb\xe3\x9f\xa1T\x8d}\xe7\xe4q'\x80R\xe9\x19\x94\xd6\x84"
    temp = temp + b"Ca\xa4\x94\xe4\x0b\xab\xe4\x8b\xabh\xa3\x88Eb\x80!\xb54\xfb\x04w\x98qk\x93m\xaf'\x1bOX"
    temp = temp + b'\x13\xa1%\x14\xe6\x9b\xaf\xbc\xc5@\xf7\x10B\x08f\x17\xa7)\x94\xf2G\x1e\xa94\xb4\x06\xd0Z\xd3\xd6\x9a\xe0'
    temp = temp + b'\xf9\x0b/\xe3(E[\xac\x9d\xc1\xbean\xdf\xbf\xce\xcc\xe2\x14\x0b\x99yz;\x06\xf6\xb9h\x02\xa5\x1cR'
    temp = temp + b'KsX\x96E\xa5Z\xe6\x07?\xfb\x1e \xd6\xdd\xa9TK\xd8v`=L\x8c\x85[\x0f9\xe0bx\xd2'
    temp = temp + b"\xa4\r\xdb\n\xd4'\x96\xf4\xa6q\r\xad5\xa1P\x98\x81\x9e!\xa6\xe6\xc7\xa9T\xcb8N\r!\\\xc1\x8e"
    temp = temp + b'\x8a\x06\x0b\xa0\xb8<\xf2\x1c\x89\xb6\x0e\xb7z\xb4l\xce\x9d\xba\xcc\xdd\xf1\xcf\xa8T\xca\x8cN\xdc\xa6\xafs\x10'
    temp = temp + b'\xd8]\x00)\x05+\xab\x192\xabKH!\xa8\xa9\x1a\xe5\\y\xcbg$\xb6eS,\xe5\xc9d\xd3\xb4F'
    temp = temp + b'\xe3{\x15\xf9T\x10B\xa0\x94\xe2\x93\xd1\x8fX\xcdgioMp\xe5\xec\xf3Hi\xad\xd7\x1e\x8d\x18\xfa\xdd'
    temp = temp + b'JC\x050\x18\x12m\x1d\x8fS\xa4\xb4b\xb0g\x88\xb6X\x82Ln\x89\xfbS\xbf\xe5\xe5g\xde \x18\x08'
    temp = temp + b'\xedz\xb2\xa4\x90,e\x17)\x95\x8b\x08\x01\xe7O]\xa1;\xd1\xbb~\x87\x0b!(\x94r|6\xf6\t\x8e'
    temp = temp + b'\xaa1\x9f\x9eah\xe0\x0c\x9f\xbb\x01\xb8\x17\xf8\xc6\xdd\x8f\x99\x9a\x9fd\xa8o\x84\xcbg\x9e\xdb\xf6\x99\xadS'
    temp = temp + b'\xe2GM\xc3;\x81\x1b/\xac6\x86h\xa4\x95\xa1\x81\x11\x96\x7f\xbb\xc4Rv\x91\xe9\xf9\x87\x9c\x1d\xba\xb8\xfb'
    temp = temp + b'\xb0\xb0\x10\xcc-N\xa3\xb4"`\x07x\xfe\xe2\xcb\x9c\x19\xbc\xb0\xfey)\xdd\x9c\x80\xb1\xc9;\xe4\x8aU\xe6'
    temp = temp + b'\xd23O01$\xd8\xda\x17\x11\xb0g~\x811\x86`0Hk\xac\x9d\x80\x1dp\x93_\x8c\xc1\xde\x90\xd9'
    temp = temp + b'$\x84\xa0R-\xaf\x1f\xa7\x14\xe2\xc8\xd3\x03\x1b\xde\t\xdc\x8a@p\xf6\xe4%l\xcbFk\xc5\x9d\xf1\xcf\xf6'
    temp = temp + b'l\xaf\x95R,,\xcd\x01\x86\x96P\x98\xf6\xd6$\xd5\x9a\x9bm\xe4\xa8\x1a5\xa7JK\xa8\x85\xd6\x98\x9b\xbb'
    temp = temp + b'\x97\xce\xa4\xa8T+\x87\xbc\xf3\xcc\xb6\xd7A\x92K\x04\x92\xf6\xd6$B\x082\xabK\xdc\xbe\xff)BH\x02'
    temp = temp + b'v\x90\x80\x1d$\x95\x9e\xe5\xc1\xa3\xbb\x08!h\r\xc7\t\x85\xc2\x07*\xf7i\xd2\xf0\x1a`+J+\x06\xba'
    temp = temp + b'O\x92\x88w\xb0\xb4\xb2\xc0\xc3\xd9\xfb\xac\xac.\xef\x98.%\x84\xa4\\-\xb1\xb4\xb2\x00\x08\xdab\xedDZ'
    temp = temp + b'"\x9bN\xa21\x86@ D2\xde\xc5\xec\xc2#V\x0bY\xb2\xb9ez:\xfa\xdd\x19\xba=\x90\xd2b~'
    temp = temp + b'i\x86\x1f\xbc\xf7\xbdm\x7f\xd3J\xd1\xd7u\x82\xd7_\xfc\xe6\xaei\\\xc6h\xce\x9e\xbc\xc8\xf5\xbb\x1f\xa3\xb5'
    temp = temp + b'\xe6\x83k\xff\xc5\xc4\xcc=\xba\x93}\x14J\x05&\xa6G\xc9\x15V\xd1F3r\xf2\x02\xe1P\xe4P\x13`'
    temp = temp + b'O\x83\x06\xe5\x04\x1a\x1c\xe5\xe0(g[|m\x8c!\xdc\x12\xe1\xf4\xe0y\xe6\x97f\xc8\xe63\x8cN\xde\xe6'
    temp = temp + b'\xd5g\xbf\xba-]J\nI:\x93b%\x97\xc1Q\x0e\x89\xb6N\x82\xc1\x96\xf5\xd9\xb65\x04\x82\xceD\x17'
    temp = temp + b'J9\x14KyR\xcbs\xf4v\x9e`\xaf~\x80R\x0eZ+\xb2\xb9\x0c\x99lz\xc7\xbf\xef\x17R*\xad'
    temp = temp + b'\x18\xec;\xcd\xcb\xcf\xfc\x1e\xbf\xba\xfe\x01\xd5j\x85\xd1\x89\xdb\x8cN\xdcr\x8fK\xb8\x03I\xa7\xfa\xcfp\xf5'
    temp = temp + b'\xf2W\x8e<\x1f\x10\x1a \x801nU=<p\x06\xa5\x15\xb1H|[\x07\xcf\x18\xc3\x85\xe1+,,\xcd'
    temp = temp + b'\xa1\xb5\xa2X\xce\xef\x9c\x16&\xa0V\xabr\xa2g\x08\x03\x0c\x0f\x9c\xc5\xe8\xedU\xa81\x9a\xc1\xdeS\x9c9'
    temp = temp + b'y\x1e\xa55\xd5Zu\x8f\x1e\xb8AJ\x8b\xc1\xdea\n\xe5\xbc\xdb.\xef\x80R\xaa\x9e\xcd\xb3w\x95m\x8c'
    temp = temp + b'\xe1\xb5\xe7\xbfNW\xb2\x97\xdb\xf7>e)\xbb\x88R\n\x81 \x16\x891r\xf2"\xcf\x9e\xbfJ\xb8%\xd2'
    temp = temp + b'\x10\x01D#\x96\x89\x13B\xd4\x1f\xfc`\xd7L\x18w\x16\xae\xfep\x87\xde\xfd\x01\x8c\x8de\xed\xfb\xb9\xf5)'
    temp = temp + b'X\xb3\xef\x10\xb3U\xcf\xe0\xdd\xfdG\xb8\x17\xf7\xa0\x17\xcd\xed\xd3h\x8a\xe5\x82\xfb\x1d\x01-\xc10\xc1`\x08'
    temp = temp + b'\xa5\x9c\x86\x85\x84\rk\x02\xf6k\x7f\x8d1\x07J\xde8HY\x87)o\x8d\xa7=&\xbf\xd6\xb6\x87["'
    temp = temp + b'\x08D\xbd\x97b\xb65WG\xcd\xb1\xeb\x046;\xc6\x1c,\x828*\x8e]\x18\xe8s\xb4\xf8\x02x\x1c_'
    temp = temp + b'\x00\x8f\xe3\x0b\xe0q|\x01<\x8e/\x80\xc7\xf1\x05\xf08\xbe\x00\x1e\xc7\x17\xc0\xe3\xf8\x02x\x1c_\x00\x8f\xe3'
    temp = temp + b'\x0b\xe0q|\x01<\x8e/\x80\xc7\xf1\x05\xf08\xbe\x00\x1e\xc7\x17\xc0\xe3\xf8\x02x\x1c_\x00\x8f\xe3\x0b\xe0q'
    temp = temp + b'<\x9b\x14*\x84\xd81\xf5[iu,\x9e\xda=*<)\x80\x10\x82r\xa5\xc4\xc4\xf4\x18\xda<~\xf6_'
    temp = temp + b'\x1b\xc3\xf0\xc0\xd9\xfa\xc3*G\xff\x90F#\xf0\xa4\x00\x96\xb4\x19\x9f\x1e\xe3\xc7\x1f\xfc\xdb\xfa\x12\xee\xc6h\x82'
    temp = temp + b'\x81\x10\x7f\xf3\xf6\xdf\x11\x8f\xb6\xa1<R\txR\x00\x83ajn\x1c\xc1\xe3f@i\xe8N\xf6\x91l\xeb'
    temp = temp + b'l\xc8j]\x8d\xc2s\x9d\xc0\xb5\x1dIfRS\xebw?\xb8\x8f\xa8\r\xf6\x0e\x1fbk\x9a\xe6\xc0s\x02'
    temp = temp + b'H\xe9>Q\x9c\xcdg\x1e?{\x88\xc1\xb6lN\xf6\r{\xaa\x03\x08\x1e\x14@ \x98\x9a\x9b\xc0Q\xd5\xf5'
    temp = temp + b'\xf7\x8c6\xb4F\xe2tw\xf45vY\xf9\x06\xe09\x01\x1cUcj~\x1c\xb1\xe1\xa7k\xa3\xe8\xed\x1c '
    temp = temp + b'\xda\x12\xf3k\x80fFJI6\xbf\xc2\xe2\xf2\xfc\xb6\xc5\x9e\x87\xfaO7d5\xf1F\xe3\xa9_,\x85\xc5'
    temp = temp + b'L\xeaa}E\xb1\xb5\x8d%\r\xa1@\x98\xfe\xee\x93\x9e\x89\xfd7\xe2)\x01\x0c\x9a\xa9\xb9\xf1M\x0fgk'
    temp = temp + b'\xa3I\xb4u\x90l\xeb<\xf2\xdd:\x8e\x03\x9e\x11@\x08A\xa9\\dv\xe1\xd1\xa65\xfa\xb5\xd6\x9c\xe8\x19'
    temp = temp + b'"\x188\xdc\xfeD\xcd\x82g\x04\x90\xd2bq9\xc5JnyS\xfboI\x8b\x93}\xa7i\xe4\xfe\xbd\x8d'
    temp = temp + b'\xc4;\x02\x08\xc1\xc3\xb9\x07\x9b6f0\xc6\x10\x8d\xc4\xe8\xed\x1ch\xc8\x02M\xc7\x01O\x08 \x84\xa0\xe6T'
    temp = temp + b'y4?\xb9i\x81H\xad\x15]\x89^Z\xa3qO\xb6\xff\xe0\x11\x01\xa4\x90ds+\xa43\xf3\x9b\x86\x7f'
    temp = temp + b'\x8d1\x9c\xea\x1f\xd9\xf4\x9e\xd7\xf0\x84\x00BJf\x16\xa6\xea\xe1\x9f[\x03\x18c\x08\x06\x82\x0c\xf4\x0ca<'
    temp = temp + b'Z\xfd\x83G\x040\xc6\xf0p\xf6\xc1\x96%d5\xf1\xd6\x04\x1d\xed\xdd\x9e\xad\xfe\xc1\x03\x02\xb8\xe1_\x81\xb9'
    temp = temp + b'\xc5GH\xf1\xb8\xaaWZs\xa2{\x88p(\xec\xc9\xf0o\x8d\xa6\xcf\x07\x90\xd2bay~\xd3\xec\x1f\xb8'
    temp = temp + b'b\x0c\xf6\x9df\xeb2\xf0\x96\xb4\xb6m\xf1\xaa\x95:Vk\xfb=M\x9a^\x00w\xf6o\x1cG9\xd8\x96'
    temp = temp + b';\xd7o\x8c!\xd2\x12\xa5\xaf\xeb\xc4\xa6\x8d%*\xd52\xd7n}H\xa5Z\xae\xaf\xe6i\x90B\xf2\xe2\xe5'
    temp = temp + b'W\xdd\r(\x9b\xb0\xa9hj\x01\x84\x10\xd4T\x95G\xf3\x13[f\xff4]\x89\x1e\xda[\x13\xeb\xd3\xbf\x02'
    temp = temp + b'\x81\xa3\x1c>\x1b\xfb5\xab\x05w\xfb9c\x0c\xb6\x15\xe0\xd2\xc8\xb3\xb4\xb7&\x9br\xac\xa8\xe9\x05\xc8\xaef'
    temp = temp + b"HgR\x9b\xaa\xff\xb5\xec\x1fK\xda\xdbV!\xb7-\x1b\xdb\nl\x10\xc0n\xf8\xb6.\x9f'M\xdd\t\x94"
    temp = temp + b'\xc2bv\xe1\x11\xc5\x8d\xe1\x1f\xeev\xae\x83}\xc3M\xdb\xae\x1f\x86\xa6\x16\x00\xdc\xf0oc\xddm\xb4\xa15'
    temp = temp + b'\xdaFW\xa2\xc7s\xd9?;\xd1\xb4\x02\xb8\xbb\x85\xe5\x99\xdd\x12\xfe\xade\xffD\xc2\xde\xcb\xfe\xd9\x89\xa6\x15'
    temp = temp + b'@J\x8b\xc5L\x8a\xd5\xfc\xca\xb6\xec\x9fS\x03g\x10\x07\xd8\x91\xd4\x0b4\xad\x00\x02\xc1\xa3\xb9\xf1M\x9d<'
    temp = temp + b"c\x0c-\xc10\xfd]'<\x99\xfd\xb3\x13M*\x80\xc0QU\xa6\xe6&6\xe5\xf9i\xa3I\xb6u\x91\x88"
    temp = temp + b"{3\xfbg'\x9aR\x80\xb5\xedd\x173\xa9m\xd9?\x83\xbd\xa7\x08\xd8A\xbf\xfd\xaf\xd3\x9c\x02\x08\xc9\xec"
    temp = temp + b'\xe2\x14\xa5JqS\x0coI\xab>\xfc\xeb_\xfc5\x9aR\x00\x83\xe1\xe1\xec\xf8\xe6\xf7\x8c&\x16\x8d\xd3\xd3'
    temp = temp + b"\xd1\xe7\xd9\xec\x9f\x9dh:\x01\x84\x10\x14K\x85z\xf8\xf7\xf8\xe7)\xad\xe9I\xf6\x11\x8bx7\xfbg'\x9a"
    temp = temp + b"N\x00\xab>\xfb\xb7-\xfc3\x86\xa1\x81\x11,\xd9t?\xf9w\xa2)\xe7\x02\x1e\xcdO\xe08\xb5\xf5'}"
    temp = temp + b'\x8d1\x84Ba\x06{\x87\x01\xb1c\n\x98\x14r\xdbx\xc1\xfa\xdf\xa4DJ\xcb\xdd6\xda\xec\xbf\xe9\xe4\x17'
    temp = temp + b'\x89\xa6\x12`mF\xef\xd1\xfc\x04b\xcb\xc5\x14\x08\xfe\xef\xb3\x9f\xef\xba#\xa8\x9b8Z\xa3\\-\xafw\x1c'
    temp = temp + b'E}\xab\xf7_~\xfa>-\xc10\x8er\xb84\xf2\x1c#\x83\xe7\x9bf\x18\xb9\xa9\x04@\xb8{\xfaV*'
    temp = temp + b'\xe5\xcdo\x0b\x81\xa3j\xdcyp\x83\xbd#\x00\xe1\xce\xfem\x18%\xd4Fso\xf2\x0e\xa6\xbe\xcbgg{'
    temp = temp + b'\x0fgO^D\xef\xb1\xf1\xf4\x17\x89\xe6\x12\xa0\xcen\xd3\xb7\xb6\xf5d?\xd7\xda\xf0\xbd\xdd\x9a\x89/*\xcd'
    temp = temp + b'\xf5k|\x0eM\xf3\xd5\x00f\xad\xa3f\x9eh\xb4o\xa7\xdac\xad\x9cf\x1c=l*\x01\x8c1H)\xf9'
    temp = temp + b'\x837\xfe\x94\x9aS=\xd4|\x9f\x10\x92R\xa5\xc8\x7f\x7f\xf8#\x8a\xe5<\xa2\x9e\x11dY6\xdfz\xf5m'
    temp = temp + b'w\xf1(\xe5\xd0\xd6\x9aDig\xff\x02\xbf 4\x95\x00\xe0\xde\xc1\xbd\x9d\x03[\x13{\xf7E\nI\xbe\x98'
    temp = temp + b'\xc3\xb2\xdcpo\xed\xeb\x02\xe8\xe9\xe8\xa7\xafk\x00\xa55Zk?\x0c<\xee<I\x88f\x84\xd9uy8'
    temp = temp + b'\xad\x15J\xa9\xa6\\>\xce\xef\x04z\x1c_\x00\x8f\xe3\x0b\xe0q\x9a\xb2\x0f\xf0\xbb\xa0\xb5v\xfb\x10\xc2\r#'
    temp = temp + b'u\x93\xaf\x1c\xe6\x0bPG\x1bM(\xd8\xc2\xdb_\xfd\x0e\x8ez\xdc\xd9\x13B\xd0\xd6\x9al\xda\x1c\x02_\x80'
    temp = temp + b'\rX\xd2rg\x0c\xb7>\x1c\xda\xc4{\x08\xf8\x02l\xa1\x19C\xbd\xbdh\xee\x06\xceg_|\x01<\x8e/'
    temp = temp + b'\x80\xc7\xf1\x05\xf08\xbe\x00\x1e\xc7\x17\xc0\xe3\xf8\x02x\x1c_\x00\x8f\xe3\x0b\xe0q|\x01<\x8e/\x80\xc7\xf1'
    temp = temp + b"\x05\xf08\xbe\x00\x1e\xc7\x17\xc0\xe3\xf8\x02x\x1c_\x00\x8f\xf3\xffV\x1e'\x802,q\x95\x00\x00\x00\x00I"
    temp = temp + b'END\xaeB`\x82\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    temp = temp + b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    temp = temp + b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    return temp # bytes 4480B
